From 318b5df99bbbe58eb9f80105d9534117ac2f25ce Mon Sep 17 00:00:00 2001
From: Rene Sapiens <rene.sapiens@ti.com>
Date: Fri, 9 Jul 2010 21:24:05 -0500
Subject: [PATCH 43/94] staging: ti dspbridge: Rename words with camel case

The intention of this patch is to rename the remaining variables with camel
case. Variables will be renamed avoiding camel case and Hungarian notation.
The words to be renamed in this patch are:
========================================
puLen to len
pulEntry to entry_pt
pulFxnAddr to fxn_addr
pulId to chan_id
pulSegId to sgmt_id
pVaBuf to va_buf
pVirtualAddress to virtual_address
pwMbVal to mbx_val
pWord to word
pXlatorAttrs to xlator_attrs
registerFxn to register_fxn
rootPersistent to root_prstnt
sectionData to section_data
sectionInfo to section_info
sectionName to section_name
sectName to sec_name
========================================

Signed-off-by: Rene Sapiens <rene.sapiens@ti.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/tidspbridge/core/io_sm.c           |    6 ++--
 drivers/staging/tidspbridge/dynload/getsection.c   |   24 ++++++++++----------
 .../staging/tidspbridge/include/dspbridge/cmm.h    |   20 ++++++++--------
 .../staging/tidspbridge/include/dspbridge/cod.h    |   16 ++++++------
 .../staging/tidspbridge/include/dspbridge/dbdcd.h  |    4 +-
 .../staging/tidspbridge/include/dspbridge/dbll.h   |    4 +-
 .../tidspbridge/include/dspbridge/dblldefs.h       |   10 ++++----
 .../staging/tidspbridge/include/dspbridge/drv.h    |    8 +++---
 .../tidspbridge/include/dspbridge/getsection.h     |   16 ++++++------
 .../staging/tidspbridge/include/dspbridge/io_sm.h  |    6 ++--
 .../tidspbridge/include/dspbridge/nodepriv.h       |    6 ++--
 drivers/staging/tidspbridge/pmgr/cmm.c             |   22 +++++++++---------
 drivers/staging/tidspbridge/pmgr/cod.c             |   16 ++++++------
 drivers/staging/tidspbridge/pmgr/dbll.c            |    6 ++--
 drivers/staging/tidspbridge/rmgr/dbdcd.c           |   12 +++++-----
 drivers/staging/tidspbridge/rmgr/drv.c             |    6 ++--
 drivers/staging/tidspbridge/rmgr/nldr.c            |   12 +++++-----
 drivers/staging/tidspbridge/rmgr/node.c            |   14 +++++-----
 18 files changed, 104 insertions(+), 104 deletions(-)

diff --git a/drivers/staging/tidspbridge/core/io_sm.c b/drivers/staging/tidspbridge/core/io_sm.c
index 6a8bdd2..a8ff5f9 100644
--- a/drivers/staging/tidspbridge/core/io_sm.c
+++ b/drivers/staging/tidspbridge/core/io_sm.c
@@ -1014,12 +1014,12 @@ void io_mbox_msg(u32 msg)
  *      interrupts the DSP.
  */
 void io_request_chnl(struct io_mgr *pio_mgr, struct chnl_object *pchnl,
-			u8 io_mode, OUT u16 *pwMbVal)
+			u8 io_mode, OUT u16 *mbx_val)
 {
 	struct chnl_mgr *chnl_mgr_obj;
 	struct shm *sm;
 
-	if (!pchnl || !pwMbVal)
+	if (!pchnl || !mbx_val)
 		goto func_end;
 	chnl_mgr_obj = pio_mgr->hchnl_mgr;
 	sm = pio_mgr->shared_mem;
@@ -1033,7 +1033,7 @@ void io_request_chnl(struct io_mgr *pio_mgr, struct chnl_object *pchnl,
 		/* Indicate to the DSP we have a buffer available for input */
 		IO_OR_VALUE(pio_mgr->hbridge_context, struct shm, sm,
 			    host_free_mask, (1 << pchnl->chnl_id));
-		*pwMbVal = MBX_PCPY_CLASS;
+		*mbx_val = MBX_PCPY_CLASS;
 	} else if (io_mode == IO_OUTPUT) {
 		/*
 		 * This assertion fails if CHNL_AddIOReq() was called on a
diff --git a/drivers/staging/tidspbridge/dynload/getsection.c b/drivers/staging/tidspbridge/dynload/getsection.c
index 029898f..3086118 100644
--- a/drivers/staging/tidspbridge/dynload/getsection.c
+++ b/drivers/staging/tidspbridge/dynload/getsection.c
@@ -226,8 +226,8 @@ void *dload_module_open(struct dynamic_loader_stream *module,
  *
  * Parameters:
  *  minfo		Handle from dload_module_open for this module
- *	sectionName	Pointer to the string name of the section desired
- *	sectionInfo	Address of a section info structure pointer to be
+ *	section_name	Pointer to the string name of the section desired
+ *	section_info	Address of a section info structure pointer to be
  *			initialized
  *
  * Effect:
@@ -237,8 +237,8 @@ void *dload_module_open(struct dynamic_loader_stream *module,
  * Returns:
  *	true for success, false for section not found
  ************************************************************************* */
-int dload_get_section_info(void *minfo, const char *sectionName,
-			   const struct ldr_section_info **const sectionInfo)
+int dload_get_section_info(void *minfo, const char *section_name,
+			   const struct ldr_section_info **const section_info)
 {
 	struct dload_state *dlthis;
 	struct ldr_section_info *shp;
@@ -250,8 +250,8 @@ int dload_get_section_info(void *minfo, const char *sectionName,
 
 	for (sec = 0; sec < dlthis->dfile_hdr.df_no_scns; sec++) {
 		shp = DOFFSEC_IS_LDRSEC(&dlthis->sect_hdrs[sec]);
-		if (strcmp(sectionName, shp->name) == 0) {
-			*sectionInfo = shp;
+		if (strcmp(section_name, shp->name) == 0) {
+			*section_info = shp;
 			return true;
 		}
 	}
@@ -267,9 +267,9 @@ int dload_get_section_info(void *minfo, const char *sectionName,
  *
  * Parameters:
  *  minfo		Handle from dload_module_open for this module
- *	sectionInfo	Pointer to a section info structure for the desired
+ *	section_info	Pointer to a section info structure for the desired
  *			section
- *	sectionData	Buffer to contain the section initialized data
+ *	section_data	Buffer to contain the section initialized data
  *
  * Effect:
  *	Copies the initialized data for the specified section into the
@@ -279,8 +279,8 @@ int dload_get_section_info(void *minfo, const char *sectionName,
  *	true for success, false for section not found
  ************************************************************************* */
 int dload_get_section(void *minfo,
-		      const struct ldr_section_info *sectionInfo,
-		      void *sectionData)
+		      const struct ldr_section_info *section_info,
+		      void *section_data)
 {
 	struct dload_state *dlthis;
 	u32 pos;
@@ -289,12 +289,12 @@ int dload_get_section(void *minfo,
 	struct image_packet_t ipacket;
 	s32 ipsize;
 	u32 checks;
-	s8 *dest = (s8 *) sectionData;
+	s8 *dest = (s8 *) section_data;
 
 	dlthis = (struct dload_state *)minfo;
 	if (!dlthis)
 		return false;
-	sptr = LDRSEC_IS_DOFFSEC(sectionInfo);
+	sptr = LDRSEC_IS_DOFFSEC(section_info);
 	if (sptr == NULL)
 		return false;
 
diff --git a/drivers/staging/tidspbridge/include/dspbridge/cmm.h b/drivers/staging/tidspbridge/include/dspbridge/cmm.h
index 9d773aa..78cc12a 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/cmm.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/cmm.h
@@ -209,17 +209,17 @@ extern bool cmm_init(void);
  *      c_factor:         Add offset if CMM_ADDTODSPPA, sub if CMM_SUBFROMDSPPA.
  *      dw_dsp_base:       DSP virtual base byte address.
  *      ul_dsp_size:       Size of DSP segment in bytes.
- *      pulSegId:        Address to store segment Id.
+ *      sgmt_id:         Address to store segment Id.
  *
  *  Returns:
  *      0:         Success.
  *      -EFAULT:     Invalid hcmm_mgr handle.
  *      -EINVAL: Invalid input argument.
  *      -EPERM:       Unable to register.
- *      - On success *pulSegId is a valid SM segment ID.
+ *      - On success *sgmt_id is a valid SM segment ID.
  *  Requires:
  *      ul_size > 0
- *      pulSegId != NULL
+ *      sgmt_id != NULL
  *      dw_gpp_base_pa != 0
  *      c_factor = CMM_ADDTODSPPA || c_factor = CMM_SUBFROMDSPPA
  *  Ensures:
@@ -232,7 +232,7 @@ extern int cmm_register_gppsm_seg(struct cmm_object *hcmm_mgr,
 					 s8 c_factor,
 					 unsigned int dw_dsp_base,
 					 u32 ul_dsp_size,
-					 u32 *pulSegId, u32 gpp_base_ba);
+					 u32 *sgmt_id, u32 gpp_base_ba);
 
 /*
  *  ======== cmm_un_register_gppsm_seg ========
@@ -261,18 +261,18 @@ extern int cmm_un_register_gppsm_seg(struct cmm_object *hcmm_mgr,
  *      Place on the descriptor on the translator's HaQ (Host Alloc'd Queue).
  *  Parameters:
  *      xlator:    Handle to a Xlator object.
- *      pVaBuf:     Virtual address ptr(client context)
+ *      va_buf:     Virtual address ptr(client context)
  *      uPaSize:    Size of SM memory to allocate.
  *  Returns:
  *      Ptr to valid physical address(Pa) of uPaSize bytes, NULL if failed.
  *  Requires:
- *      pVaBuf != 0.
+ *      va_buf != 0.
  *      uPaSize != 0.
  *  Ensures:
  *
  */
 extern void *cmm_xlator_alloc_buf(struct cmm_xlatorobject *xlator,
-				  void *pVaBuf, u32 uPaSize);
+				  void *va_buf, u32 uPaSize);
 
 /*
  *  ======== cmm_xlator_create ========
@@ -283,7 +283,7 @@ extern void *cmm_xlator_alloc_buf(struct cmm_xlatorobject *xlator,
  *  Parameters:
  *     xlator:         Address to place handle to a new Xlator handle.
  *     hcmm_mgr:        Handle to Cmm Mgr associated with this translator.
- *     pXlatorAttrs:   Translator attributes used for the client NODE or STREAM.
+ *     xlator_attrs:   Translator attributes used for the client NODE or STREAM.
  *  Returns:
  *     0:            Success.
  *     -EINVAL:    Bad input Attrs.
@@ -291,13 +291,13 @@ extern void *cmm_xlator_alloc_buf(struct cmm_xlatorobject *xlator,
  *  Requires:
  *     xlator != NULL
  *     hcmm_mgr != NULL
- *     pXlatorAttrs != NULL
+ *     xlator_attrs != NULL
  *  Ensures:
  *
  */
 extern int cmm_xlator_create(OUT struct cmm_xlatorobject **xlator,
 				    struct cmm_object *hcmm_mgr,
-				    struct cmm_xlatorattrs *pXlatorAttrs);
+				    struct cmm_xlatorattrs *xlator_attrs);
 
 /*
  *  ======== cmm_xlator_delete ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/cod.h b/drivers/staging/tidspbridge/include/dspbridge/cod.h
index c84761e..2d5f41a 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/cod.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/cod.h
@@ -169,17 +169,17 @@ extern int cod_get_base_name(struct cod_manager *cod_mgr_obj,
  *      Retrieve the entry point of a loaded DSP program image
  *  Parameters:
  *      cod_mgr_obj:   handle of manager to be deleted
- *      pulEntry:   pointer to location for entry point
+ *      entry_pt:   pointer to location for entry point
  *  Returns:
  *      0:       Success.
  *  Requires:
  *      COD module initialized.
  *      valid cod_mgr_obj.
- *      pulEntry != NULL.
+ *      entry_pt != NULL.
  *  Ensures:
  */
 extern int cod_get_entry(struct cod_manager *cod_mgr_obj,
-				u32 *pulEntry);
+				u32 *entry_pt);
 
 /*
  *  ======== cod_get_loader ========
@@ -208,7 +208,7 @@ extern int cod_get_loader(struct cod_manager *cod_mgr_obj,
  *      lib         Library handle returned from cod_open().
  *      str_sect:   name of the section, with or without leading "."
  *      addr:       Location to store address.
- *      puLen:      Location to store length.
+ *      len:        Location to store length.
  *  Returns:
  *      0:                Success
  *      -ESPIPE:  Symbols could not be found or have not been loaded onto
@@ -218,16 +218,16 @@ extern int cod_get_loader(struct cod_manager *cod_mgr_obj,
  *      valid cod_mgr_obj.
  *      str_sect != NULL;
  *      addr != NULL;
- *      puLen != NULL;
+ *      len != NULL;
  *  Ensures:
- *      0:  *addr and *puLen contain the address and length of the
+ *      0:  *addr and *len contain the address and length of the
  *                 section.
- *      else:  *addr == 0 and *puLen == 0;
+ *      else:  *addr == 0 and *len == 0;
  *
  */
 extern int cod_get_section(struct cod_libraryobj *lib,
 				  IN char *str_sect,
-				  OUT u32 *addr, OUT u32 *puLen);
+				  OUT u32 *addr, OUT u32 *len);
 
 /*
  *  ======== cod_get_sym_value ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dbdcd.h b/drivers/staging/tidspbridge/include/dspbridge/dbdcd.h
index c798e72..5e3b7f7 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dbdcd.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dbdcd.h
@@ -278,7 +278,7 @@ extern int dcd_get_object_def(IN struct dcd_manager *hdcd_mgr,
  *      hdcd_mgr:                A DCD manager handle.
  *      sz_coff_path:           Pointer to name of COFF file containing DCD
  *                              objects.
- *      registerFxn:            Callback fxn to be applied on each located
+ *      register_fxn:           Callback fxn to be applied on each located
  *                              DCD object.
  *      handle:                 Handle to pass to callback.
  *  Returns:
@@ -296,7 +296,7 @@ extern int dcd_get_object_def(IN struct dcd_manager *hdcd_mgr,
  */
 extern int dcd_get_objects(IN struct dcd_manager *hdcd_mgr,
 				  IN char *sz_coff_path,
-				  dcd_registerfxn registerFxn, void *handle);
+				  dcd_registerfxn register_fxn, void *handle);
 
 /*
  *  ======== dcd_init ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dbll.h b/drivers/staging/tidspbridge/include/dspbridge/dbll.h
index a4dea0c..a197115 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dbll.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dbll.h
@@ -43,7 +43,7 @@ extern int dbll_load(struct dbll_library_obj *lib,
 			    dbll_flags flags,
 			    struct dbll_attrs *attrs, u32 * entry);
 extern int dbll_load_sect(struct dbll_library_obj *lib,
-				 char *sectName, struct dbll_attrs *attrs);
+				 char *sec_name, struct dbll_attrs *attrs);
 extern int dbll_open(struct dbll_tar_obj *target, char *file,
 			    dbll_flags flags,
 		       struct dbll_library_obj **lib_obj);
@@ -53,7 +53,7 @@ extern void dbll_set_attrs(struct dbll_tar_obj *target,
 			   struct dbll_attrs *pattrs);
 extern void dbll_unload(struct dbll_library_obj *lib, struct dbll_attrs *attrs);
 extern int dbll_unload_sect(struct dbll_library_obj *lib,
-				   char *sectName, struct dbll_attrs *attrs);
+				   char *sect_name, struct dbll_attrs *attrs);
 #ifdef CONFIG_TIDSPBRIDGE_BACKTRACE
 bool dbll_find_dsp_symbol(struct dbll_library_obj *zl_lib, u32 address,
 		u32 offset_range, u32 *sym_addr_output, char *name_output);
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h b/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h
index 8446e0e..fa4c99f 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h
@@ -334,7 +334,7 @@ typedef bool(*dbll_init_fxn) (void);
  *      lib             - Library handle returned from dbll_open().
  *      flags           - Load code, data and/or symbols.
  *      attrs           - May contain alloc, free, and write function.
- *      pulEntry        - Location to store program entry on output.
+ *      entry_pt        - Location to store program entry on output.
  *  Returns:
  *      0:        Success.
  *      -EBADF:     File read failed.
@@ -354,7 +354,7 @@ typedef int(*dbll_load_fxn) (struct dbll_library_obj *lib,
  *  Load a named section from an library (for overlay support).
  *  Parameters:
  *      lib             - Handle returned from dbll_open().
- *      sectName        - Name of section to load.
+ *      sec_name        - Name of section to load.
  *      attrs           - Contains write function and handle to pass to it.
  *  Returns:
  *      0:        Success.
@@ -362,7 +362,7 @@ typedef int(*dbll_load_fxn) (struct dbll_library_obj *lib,
  *      -ENOSYS:   Function not implemented.
  *  Requires:
  *      Valid lib.
- *      sectName != NULL.
+ *      sec_name != NULL.
  *      attrs != NULL.
  *      attrs->write != NULL.
  *  Ensures:
@@ -458,7 +458,7 @@ typedef void (*dbll_unload_fxn) (struct dbll_library_obj *library,
  *  Unload a named section from an library (for overlay support).
  *  Parameters:
  *      lib             - Handle returned from dbll_open().
- *      sectName        - Name of section to load.
+ *      sec_name        - Name of section to load.
  *      attrs           - Contains free() function and handle to pass to it.
  *  Returns:
  *      0:        Success.
@@ -467,7 +467,7 @@ typedef void (*dbll_unload_fxn) (struct dbll_library_obj *library,
  *  Requires:
  *      DBL initialized.
  *      Valid lib.
- *      sectName != NULL.
+ *      sec_name != NULL.
  *  Ensures:
  */
 typedef int(*dbll_unload_sect_fxn) (struct dbll_library_obj *lib,
diff --git a/drivers/staging/tidspbridge/include/dspbridge/drv.h b/drivers/staging/tidspbridge/include/dspbridge/drv.h
index b43d22f..efdc29c 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/drv.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/drv.h
@@ -470,7 +470,7 @@ extern void *mem_alloc_phys_mem(IN u32 byte_size,
  *  Purpose:
  *      Free the given block of physically contiguous memory.
  *  Parameters:
- *      pVirtualAddress:  Pointer to virtual memory region allocated
+ *      virtual_address:  Pointer to virtual memory region allocated
  *      by mem_alloc_phys_mem().
  *      physical_address:  Pointer to physical memory region  allocated
  *      by mem_alloc_phys_mem().
@@ -478,12 +478,12 @@ extern void *mem_alloc_phys_mem(IN u32 byte_size,
  *  Returns:
  *  Requires:
  *      MEM initialized.
- *      pVirtualAddress is a valid memory address returned by
+ *      virtual_address is a valid memory address returned by
  *          mem_alloc_phys_mem()
  *  Ensures:
- *      pVirtualAddress is no longer a valid pointer to memory.
+ *      virtual_address is no longer a valid pointer to memory.
  */
-extern void mem_free_phys_mem(void *pVirtualAddress,
+extern void mem_free_phys_mem(void *virtual_address,
 			      u32 physical_address, u32 byte_size);
 
 /*
diff --git a/drivers/staging/tidspbridge/include/dspbridge/getsection.h b/drivers/staging/tidspbridge/include/dspbridge/getsection.h
index bdd8e20..626063d 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/getsection.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/getsection.h
@@ -54,8 +54,8 @@ extern void *dload_module_open(struct dynamic_loader_stream
  *
  * Parameters:
  *  minfo       Handle from dload_module_open for this module
- *  sectionName Pointer to the string name of the section desired
- *  sectionInfo Address of a section info structure pointer to be initialized
+ *  section_name Pointer to the string name of the section desired
+ *  section_info Address of a section info structure pointer to be initialized
  *
  * Effect:
  *  Finds the specified section in the module information, and fills in
@@ -65,17 +65,17 @@ extern void *dload_module_open(struct dynamic_loader_stream
  *  TRUE for success, FALSE for section not found
  */
 extern int dload_get_section_info(void *minfo,
-				  const char *sectionName,
+				  const char *section_name,
 				  const struct ldr_section_info
-				  **const sectionInfo);
+				  **const section_info);
 
 /*
  * Procedure dload_get_section
  *
  * Parameters:
  *  minfo       Handle from dload_module_open for this module
- *  sectionInfo Pointer to a section info structure for the desired section
- *  sectionData Buffer to contain the section initialized data
+ *  section_info Pointer to a section info structure for the desired section
+ *  section_data Buffer to contain the section initialized data
  *
  * Effect:
  *  Copies the initialized data for the specified section into the
@@ -85,8 +85,8 @@ extern int dload_get_section_info(void *minfo,
  *  TRUE for success, FALSE for section not found
  */
 extern int dload_get_section(void *minfo,
-			     const struct ldr_section_info *sectionInfo,
-			     void *sectionData);
+			     const struct ldr_section_info *section_info,
+			     void *section_data);
 
 /*
  * Procedure dload_module_close
diff --git a/drivers/staging/tidspbridge/include/dspbridge/io_sm.h b/drivers/staging/tidspbridge/include/dspbridge/io_sm.h
index 1627e0a..a7fded7 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/io_sm.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/io_sm.h
@@ -116,7 +116,7 @@ void io_mbox_msg(u32 msg);
  */
 extern void io_request_chnl(struct io_mgr *hio_mgr,
 			    struct chnl_object *pchnl,
-			    u8 io_mode, OUT u16 *pwMbVal);
+			    u8 io_mode, OUT u16 *mbx_val);
 
 /*
  *  ======== iosm_schedule ========
@@ -190,7 +190,7 @@ extern void io_ddma_clear_chnl_desc(struct io_mgr *hio_mgr, u32 uDDMAChnlId);
 extern void io_ddma_request_chnl(struct io_mgr *hio_mgr,
 				 struct chnl_object *pchnl,
 				 struct chnl_irp *chnl_packet_obj,
-				 OUT u16 *pwMbVal);
+				 OUT u16 *mbx_val);
 
 /*
  * Zero-copy IO functions
@@ -245,7 +245,7 @@ extern void io_ddzc_clear_chnl_desc(struct io_mgr *hio_mgr, u32 uChnlId);
 extern void io_ddzc_request_chnl(struct io_mgr *hio_mgr,
 				 struct chnl_object *pchnl,
 				 struct chnl_irp *chnl_packet_obj,
-				 OUT u16 *pwMbVal);
+				 OUT u16 *mbx_val);
 
 /*
  *  ======== io_sh_msetting ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/nodepriv.h b/drivers/staging/tidspbridge/include/dspbridge/nodepriv.h
index 0b45094..7c2e7a9 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/nodepriv.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/nodepriv.h
@@ -88,7 +88,7 @@ struct node_createargs {
  *      hnode:          Node object allocated from node_allocate().
  *      dir:           Input (DSP_TONODE) or output (DSP_FROMNODE).
  *      index:         Stream index.
- *      pulId:          Location to store channel index.
+ *      chan_id:        Location to store channel index.
  *  Returns:
  *      0:        Success.
  *      -EFAULT:    Invalid hnode.
@@ -98,11 +98,11 @@ struct node_createargs {
  *  Requires:
  *      node_init(void) called.
  *      Valid dir.
- *      pulId != NULL.
+ *      chan_id != NULL.
  *  Ensures:
  */
 extern int node_get_channel_id(struct node_object *hnode,
-				      u32 dir, u32 index, OUT u32 *pulId);
+				      u32 dir, u32 index, OUT u32 *chan_id);
 
 /*
  *  ======== node_get_strm_mgr ========
diff --git a/drivers/staging/tidspbridge/pmgr/cmm.c b/drivers/staging/tidspbridge/pmgr/cmm.c
index 8fd9c26..0a36085 100644
--- a/drivers/staging/tidspbridge/pmgr/cmm.c
+++ b/drivers/staging/tidspbridge/pmgr/cmm.c
@@ -540,7 +540,7 @@ int cmm_register_gppsm_seg(struct cmm_object *hcmm_mgr,
 				  u32 dw_gpp_base_pa, u32 ul_size,
 				  u32 dsp_addr_offset, s8 c_factor,
 				  u32 dw_dsp_base, u32 ul_dsp_size,
-				  u32 *pulSegId, u32 dw_gpp_base_va)
+				  u32 *sgmt_id, u32 dw_gpp_base_va)
 {
 	struct cmm_object *cmm_mgr_obj = (struct cmm_object *)hcmm_mgr;
 	struct cmm_allocator *psma = NULL;
@@ -549,7 +549,7 @@ int cmm_register_gppsm_seg(struct cmm_object *hcmm_mgr,
 	s32 slot_seg;
 
 	DBC_REQUIRE(ul_size > 0);
-	DBC_REQUIRE(pulSegId != NULL);
+	DBC_REQUIRE(sgmt_id != NULL);
 	DBC_REQUIRE(dw_gpp_base_pa != 0);
 	DBC_REQUIRE(dw_gpp_base_va != 0);
 	DBC_REQUIRE((c_factor <= CMM_ADDTODSPPA) &&
@@ -596,7 +596,7 @@ int cmm_register_gppsm_seg(struct cmm_object *hcmm_mgr,
 		}
 		if (DSP_SUCCEEDED(status)) {
 			/* return the actual segment identifier */
-			*pulSegId = (u32) slot_seg + 1;
+			*sgmt_id = (u32) slot_seg + 1;
 			/* create memory free list */
 			psma->free_list_head = kzalloc(sizeof(struct lst_list),
 								GFP_KERNEL);
@@ -956,7 +956,7 @@ static struct cmm_allocator *get_allocator(struct cmm_object *cmm_mgr_obj,
  */
 int cmm_xlator_create(OUT struct cmm_xlatorobject **xlator,
 			     struct cmm_object *hcmm_mgr,
-			     struct cmm_xlatorattrs *pXlatorAttrs)
+			     struct cmm_xlatorattrs *xlator_attrs)
 {
 	struct cmm_xlator *xlator_object = NULL;
 	int status = 0;
@@ -966,14 +966,14 @@ int cmm_xlator_create(OUT struct cmm_xlatorobject **xlator,
 	DBC_REQUIRE(hcmm_mgr != NULL);
 
 	*xlator = NULL;
-	if (pXlatorAttrs == NULL)
-		pXlatorAttrs = &cmm_dfltxlatorattrs;	/* set defaults */
+	if (xlator_attrs == NULL)
+		xlator_attrs = &cmm_dfltxlatorattrs;	/* set defaults */
 
 	xlator_object = kzalloc(sizeof(struct cmm_xlator), GFP_KERNEL);
 	if (xlator_object != NULL) {
 		xlator_object->hcmm_mgr = hcmm_mgr;	/* ref back to CMM */
 		/* SM seg_id */
-		xlator_object->ul_seg_id = pXlatorAttrs->ul_seg_id;
+		xlator_object->ul_seg_id = xlator_attrs->ul_seg_id;
 	} else {
 		status = -ENOMEM;
 	}
@@ -1007,7 +1007,7 @@ int cmm_xlator_delete(struct cmm_xlatorobject *xlator, bool force)
 /*
  *  ======== cmm_xlator_alloc_buf ========
  */
-void *cmm_xlator_alloc_buf(struct cmm_xlatorobject *xlator, void *pVaBuf,
+void *cmm_xlator_alloc_buf(struct cmm_xlatorobject *xlator, void *va_buf,
 			   u32 uPaSize)
 {
 	struct cmm_xlator *xlator_obj = (struct cmm_xlator *)xlator;
@@ -1017,20 +1017,20 @@ void *cmm_xlator_alloc_buf(struct cmm_xlatorobject *xlator, void *pVaBuf,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(xlator != NULL);
 	DBC_REQUIRE(xlator_obj->hcmm_mgr != NULL);
-	DBC_REQUIRE(pVaBuf != NULL);
+	DBC_REQUIRE(va_buf != NULL);
 	DBC_REQUIRE(uPaSize > 0);
 	DBC_REQUIRE(xlator_obj->ul_seg_id > 0);
 
 	if (xlator_obj) {
 		attrs.ul_seg_id = xlator_obj->ul_seg_id;
-		*(volatile u32 *)pVaBuf = 0;
+		*(volatile u32 *)va_buf = 0;
 		/* Alloc SM */
 		pbuf =
 		    cmm_calloc_buf(xlator_obj->hcmm_mgr, uPaSize, &attrs, NULL);
 		if (pbuf) {
 			/* convert to translator(node/strm) process Virtual
 			 * address */
-			*(volatile u32 **)pVaBuf =
+			*(volatile u32 **)va_buf =
 			    (u32 *) cmm_xlator_translate(xlator,
 							 pbuf, CMM_PA2VA);
 		}
diff --git a/drivers/staging/tidspbridge/pmgr/cod.c b/drivers/staging/tidspbridge/pmgr/cod.c
index ae44bed..d9501eb 100644
--- a/drivers/staging/tidspbridge/pmgr/cod.c
+++ b/drivers/staging/tidspbridge/pmgr/cod.c
@@ -360,13 +360,13 @@ int cod_get_base_name(struct cod_manager *cod_mgr_obj, char *sz_name,
  *      Retrieve the entry point of a loaded DSP program image
  *
  */
-int cod_get_entry(struct cod_manager *cod_mgr_obj, u32 *pulEntry)
+int cod_get_entry(struct cod_manager *cod_mgr_obj, u32 *entry_pt)
 {
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(IS_VALID(cod_mgr_obj));
-	DBC_REQUIRE(pulEntry != NULL);
+	DBC_REQUIRE(entry_pt != NULL);
 
-	*pulEntry = cod_mgr_obj->ul_entry;
+	*entry_pt = cod_mgr_obj->ul_entry;
 
 	return 0;
 }
@@ -397,7 +397,7 @@ int cod_get_loader(struct cod_manager *cod_mgr_obj,
  *      given the section name.
  */
 int cod_get_section(struct cod_libraryobj *lib, IN char *str_sect,
-			   OUT u32 *addr, OUT u32 *puLen)
+			   OUT u32 *addr, OUT u32 *len)
 {
 	struct cod_manager *cod_mgr_obj;
 	int status = 0;
@@ -407,19 +407,19 @@ int cod_get_section(struct cod_libraryobj *lib, IN char *str_sect,
 	DBC_REQUIRE(IS_VALID(lib->cod_mgr));
 	DBC_REQUIRE(str_sect != NULL);
 	DBC_REQUIRE(addr != NULL);
-	DBC_REQUIRE(puLen != NULL);
+	DBC_REQUIRE(len != NULL);
 
 	*addr = 0;
-	*puLen = 0;
+	*len = 0;
 	if (lib != NULL) {
 		cod_mgr_obj = lib->cod_mgr;
 		status = cod_mgr_obj->fxns.get_sect_fxn(lib->dbll_lib, str_sect,
-							addr, puLen);
+							addr, len);
 	} else {
 		status = -ESPIPE;
 	}
 
-	DBC_ENSURE(DSP_SUCCEEDED(status) || ((*addr == 0) && (*puLen == 0)));
+	DBC_ENSURE(DSP_SUCCEEDED(status) || ((*addr == 0) && (*len == 0)));
 
 	return status;
 }
diff --git a/drivers/staging/tidspbridge/pmgr/dbll.c b/drivers/staging/tidspbridge/pmgr/dbll.c
index e94ef6b..cb4d2a7 100644
--- a/drivers/staging/tidspbridge/pmgr/dbll.c
+++ b/drivers/staging/tidspbridge/pmgr/dbll.c
@@ -573,7 +573,7 @@ int dbll_load(struct dbll_library_obj *lib, dbll_flags flags,
  *  ======== dbll_load_sect ========
  *  Not supported for COFF.
  */
-int dbll_load_sect(struct dbll_library_obj *zl_lib, char *sectName,
+int dbll_load_sect(struct dbll_library_obj *zl_lib, char *sec_name,
 			  struct dbll_attrs *attrs)
 {
 	DBC_REQUIRE(zl_lib);
@@ -853,11 +853,11 @@ func_end:
  *  ======== dbll_unload_sect ========
  *  Not supported for COFF.
  */
-int dbll_unload_sect(struct dbll_library_obj *lib, char *sectName,
+int dbll_unload_sect(struct dbll_library_obj *lib, char *sec_name,
 			    struct dbll_attrs *attrs)
 {
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(sectName != NULL);
+	DBC_REQUIRE(sec_name != NULL);
 
 	return -ENOSYS;
 }
diff --git a/drivers/staging/tidspbridge/rmgr/dbdcd.c b/drivers/staging/tidspbridge/rmgr/dbdcd.c
index a5cef43..992ff73 100644
--- a/drivers/staging/tidspbridge/rmgr/dbdcd.c
+++ b/drivers/staging/tidspbridge/rmgr/dbdcd.c
@@ -66,7 +66,7 @@ static int get_attrs_from_buf(char *psz_buf, u32 ul_buf_size,
 				     enum dsp_dcdobjtype obj_type,
 				     struct dcd_genericobj *gen_obj);
 static void compress_buf(char *psz_buf, u32 ul_buf_size, s32 char_size);
-static char dsp_char2_gpp_char(char *pWord, s32 dsp_char_size);
+static char dsp_char2_gpp_char(char *word, s32 dsp_char_size);
 static int get_dep_lib_info(IN struct dcd_manager *hdcd_mgr,
 				   IN struct dsp_uuid *uuid_obj,
 				   IN OUT u16 *num_libs,
@@ -534,7 +534,7 @@ func_end:
  *  ======== dcd_get_objects ========
  */
 int dcd_get_objects(IN struct dcd_manager *hdcd_mgr,
-			   IN char *sz_coff_path, dcd_registerfxn registerFxn,
+			   IN char *sz_coff_path, dcd_registerfxn register_fxn,
 			   void *handle)
 {
 	struct dcd_manager *dcd_mgr_obj = hdcd_mgr;
@@ -608,7 +608,7 @@ int dcd_get_objects(IN struct dcd_manager *hdcd_mgr,
 			object_type = atoi(token);
 
 			/*
-			 *  Apply registerFxn to the found DCD object.
+			 *  Apply register_fxn to the found DCD object.
 			 *  Possible actions include:
 			 *
 			 *  1) Register found DCD object.
@@ -616,7 +616,7 @@ int dcd_get_objects(IN struct dcd_manager *hdcd_mgr,
 			 *  3) Add overlay node.
 			 */
 			status =
-			    registerFxn(&dsp_uuid_obj, object_type, handle);
+			    register_fxn(&dsp_uuid_obj, object_type, handle);
 			if (DSP_FAILED(status)) {
 				/* if error occurs, break from while loop. */
 				break;
@@ -1376,13 +1376,13 @@ static void compress_buf(char *psz_buf, u32 ul_buf_size, s32 char_size)
  *  Purpose:
  *      Convert DSP char to host GPP char in a portable manner
  */
-static char dsp_char2_gpp_char(char *pWord, s32 dsp_char_size)
+static char dsp_char2_gpp_char(char *word, s32 dsp_char_size)
 {
 	char ch = '\0';
 	char *ch_src;
 	s32 i;
 
-	for (ch_src = pWord, i = dsp_char_size; i > 0; i--)
+	for (ch_src = word, i = dsp_char_size; i > 0; i--)
 		ch |= *ch_src++;
 
 	return ch;
diff --git a/drivers/staging/tidspbridge/rmgr/drv.c b/drivers/staging/tidspbridge/rmgr/drv.c
index f38123d..dc0c629 100644
--- a/drivers/staging/tidspbridge/rmgr/drv.c
+++ b/drivers/staging/tidspbridge/rmgr/drv.c
@@ -1037,12 +1037,12 @@ void *mem_alloc_phys_mem(u32 byte_size, u32 ulAlign, OUT u32 * physical_address)
  *  Purpose:
  *      Free the given block of physically contiguous memory.
  */
-void mem_free_phys_mem(void *pVirtualAddress, u32 physical_address,
+void mem_free_phys_mem(void *virtual_address, u32 physical_address,
 		       u32 byte_size)
 {
-	DBC_REQUIRE(pVirtualAddress != NULL);
+	DBC_REQUIRE(virtual_address != NULL);
 
 	if (!ext_phys_mem_pool_enabled)
-		dma_free_coherent(NULL, byte_size, pVirtualAddress,
+		dma_free_coherent(NULL, byte_size, virtual_address,
 				  physical_address);
 }
diff --git a/drivers/staging/tidspbridge/rmgr/nldr.c b/drivers/staging/tidspbridge/rmgr/nldr.c
index 3eb1ae3..198b698 100644
--- a/drivers/staging/tidspbridge/rmgr/nldr.c
+++ b/drivers/staging/tidspbridge/rmgr/nldr.c
@@ -299,7 +299,7 @@ static bool get_symbol_value(void *handle, void *parg, void *rmm_handle,
 			     char *symName, struct dbll_sym_val **sym);
 static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 			   struct lib_node *root, struct dsp_uuid uuid,
-			   bool rootPersistent,
+			   bool root_prstnt,
 			   struct dbll_library_obj **lib_path,
 			   enum nldr_phase phase, u16 depth);
 static int load_ovly(struct nldr_nodeobject *nldr_node_obj,
@@ -1243,7 +1243,7 @@ static bool get_symbol_value(void *handle, void *parg, void *rmm_handle,
  */
 static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 			   struct lib_node *root, struct dsp_uuid uuid,
-			   bool rootPersistent,
+			   bool root_prstnt,
 			   struct dbll_library_obj **lib_path,
 			   enum nldr_phase phase, u16 depth)
 {
@@ -1300,7 +1300,7 @@ static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 	kfree(psz_file_name);
 
 	/* Check to see if library not already loaded */
-	if (DSP_SUCCEEDED(status) && rootPersistent) {
+	if (DSP_SUCCEEDED(status) && root_prstnt) {
 		lib_status =
 		    find_in_persistent_lib_array(nldr_node_obj, root->lib);
 		/* Close library */
@@ -1374,7 +1374,7 @@ static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 			/* If root library is NOT persistent, and dep library
 			 * is, then record it.  If root library IS persistent,
 			 * the deplib is already included */
-			if (!rootPersistent && persistent_dep_libs[i] &&
+			if (!root_prstnt && persistent_dep_libs[i] &&
 			    *nldr_node_obj->pf_phase_split) {
 				if ((nldr_node_obj->pers_libs) >= MAXLIBS) {
 					status = -EILSEQ;
@@ -1386,7 +1386,7 @@ static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 				    &nldr_node_obj->pers_lib_table
 				    [nldr_node_obj->pers_libs];
 			} else {
-				if (rootPersistent)
+				if (root_prstnt)
 					persistent_dep_libs[i] = true;
 
 				/* Allocate library within phase */
@@ -1400,7 +1400,7 @@ static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 
 			if (DSP_SUCCEEDED(status)) {
 				if ((status != 0) &&
-				    !rootPersistent && persistent_dep_libs[i] &&
+				    !root_prstnt && persistent_dep_libs[i] &&
 				    *nldr_node_obj->pf_phase_split) {
 					(nldr_node_obj->pers_libs)++;
 				} else {
diff --git a/drivers/staging/tidspbridge/rmgr/node.c b/drivers/staging/tidspbridge/rmgr/node.c
index 91a5d8c..cdae2c8 100644
--- a/drivers/staging/tidspbridge/rmgr/node.c
+++ b/drivers/staging/tidspbridge/rmgr/node.c
@@ -248,7 +248,7 @@ static void fill_stream_def(struct node_object *hnode,
 			    struct node_strmdef *pstrm_def,
 			    struct dsp_strmattr *pattrs);
 static void free_stream(struct node_mgr *hnode_mgr, struct stream_chnl stream);
-static int get_fxn_address(struct node_object *hnode, u32 * pulFxnAddr,
+static int get_fxn_address(struct node_object *hnode, u32 * fxn_addr,
 				  u32 uPhase);
 static int get_node_props(struct dcd_manager *hdcd_mgr,
 				 struct node_object *hnode,
@@ -1762,13 +1762,13 @@ int node_get_attr(struct node_object *hnode,
  *      host and a node.
  */
 int node_get_channel_id(struct node_object *hnode, u32 dir, u32 index,
-			       OUT u32 *pulId)
+			       OUT u32 *chan_id)
 {
 	enum node_type node_type;
 	int status = -EINVAL;
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(dir == DSP_TONODE || dir == DSP_FROMNODE);
-	DBC_REQUIRE(pulId != NULL);
+	DBC_REQUIRE(chan_id != NULL);
 
 	if (!hnode) {
 		status = -EFAULT;
@@ -1782,7 +1782,7 @@ int node_get_channel_id(struct node_object *hnode, u32 dir, u32 index,
 	if (dir == DSP_TONODE) {
 		if (index < MAX_INPUTS(hnode)) {
 			if (hnode->inputs[index].type == HOSTCONNECT) {
-				*pulId = hnode->inputs[index].dev_id;
+				*chan_id = hnode->inputs[index].dev_id;
 				status = 0;
 			}
 		}
@@ -1790,7 +1790,7 @@ int node_get_channel_id(struct node_object *hnode, u32 dir, u32 index,
 		DBC_ASSERT(dir == DSP_FROMNODE);
 		if (index < MAX_OUTPUTS(hnode)) {
 			if (hnode->outputs[index].type == HOSTCONNECT) {
-				*pulId = hnode->outputs[index].dev_id;
+				*chan_id = hnode->outputs[index].dev_id;
 				status = 0;
 			}
 		}
@@ -2819,7 +2819,7 @@ static void free_stream(struct node_mgr *hnode_mgr, struct stream_chnl stream)
  *  Purpose:
  *      Retrieves the address for create, execute or delete phase for a node.
  */
-static int get_fxn_address(struct node_object *hnode, u32 * pulFxnAddr,
+static int get_fxn_address(struct node_object *hnode, u32 * fxn_addr,
 				  u32 uPhase)
 {
 	char *pstr_fxn_name = NULL;
@@ -2850,7 +2850,7 @@ static int get_fxn_address(struct node_object *hnode, u32 * pulFxnAddr,
 
 	status =
 	    hnode_mgr->nldr_fxns.pfn_get_fxn_addr(hnode->nldr_node_obj,
-						  pstr_fxn_name, pulFxnAddr);
+						  pstr_fxn_name, fxn_addr);
 
 	return status;
 }
-- 
1.7.0.4

