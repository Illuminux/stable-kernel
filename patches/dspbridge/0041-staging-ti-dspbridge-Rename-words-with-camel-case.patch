From 13b18c29ec01068dce4b266cc179d4e90e79d0e9 Mon Sep 17 00:00:00 2001
From: Rene Sapiens <rene.sapiens@ti.com>
Date: Fri, 9 Jul 2010 21:24:03 -0500
Subject: [PATCH 41/94] staging: ti dspbridge: Rename words with camel case.

The intention of this patch is to rename the remaining variables with camel
case. Variables will be renamed avoiding camel case and Hungarian notation.
The words to be renamed in this patch are:
========================================
pPhysAddr to phys_addr
pPhysicalAddress to physical_address
ppIntfFxns to if_fxns
pProcLoadStat to proc_load_stat
pProcStat to proc_lstat
ppSym to sym_val
pRefData to ref_data
pRef to ref
preservedBit to preserved_bit
pResult to result
procID to proc_id
pSectInfo to sect_inf
pSrc to src
pstrContent to str_content
pstrDummyFile to str_dummy_file
pstrExecFile to str_exec_file
========================================

Signed-off-by: Rene Sapiens <rene.sapiens@ti.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/staging/tidspbridge/core/io_sm.c           |   33 ++++++++++---------
 drivers/staging/tidspbridge/hw/hw_mmu.c            |   12 +++---
 drivers/staging/tidspbridge/hw/hw_mmu.h            |    2 +-
 .../staging/tidspbridge/include/dspbridge/cfg.h    |   10 +++---
 .../staging/tidspbridge/include/dspbridge/cod.h    |    8 ++--
 .../staging/tidspbridge/include/dspbridge/dbll.h   |    4 +-
 .../tidspbridge/include/dspbridge/dblldefs.h       |   12 +++---
 .../staging/tidspbridge/include/dspbridge/dev.h    |   10 +++---
 .../staging/tidspbridge/include/dspbridge/drv.h    |   10 +++---
 .../staging/tidspbridge/include/dspbridge/dspapi.h |    4 +-
 .../tidspbridge/include/dspbridge/dspdefs.h        |    4 +-
 .../staging/tidspbridge/include/dspbridge/dspio.h  |    2 +-
 .../staging/tidspbridge/include/dspbridge/io_sm.h  |    6 ++--
 .../staging/tidspbridge/include/dspbridge/proc.h   |    4 +-
 drivers/staging/tidspbridge/pmgr/cod.c             |    8 ++--
 drivers/staging/tidspbridge/pmgr/dbll.c            |   14 ++++----
 drivers/staging/tidspbridge/pmgr/dev.c             |   14 ++++----
 drivers/staging/tidspbridge/rmgr/drv.c             |   18 +++++-----
 drivers/staging/tidspbridge/rmgr/nldr.c            |   22 ++++++------
 drivers/staging/tidspbridge/rmgr/proc.c            |    4 +-
 drivers/staging/tidspbridge/services/cfg.c         |    8 ++--
 21 files changed, 105 insertions(+), 104 deletions(-)

diff --git a/drivers/staging/tidspbridge/core/io_sm.c b/drivers/staging/tidspbridge/core/io_sm.c
index 5090ff1..6a8bdd2 100644
--- a/drivers/staging/tidspbridge/core/io_sm.c
+++ b/drivers/staging/tidspbridge/core/io_sm.c
@@ -148,9 +148,9 @@ static void output_msg(struct io_mgr *pio_mgr, struct msg_mgr *hmsg_mgr);
 static u32 find_ready_output(struct chnl_mgr *chnl_mgr_obj,
 			     struct chnl_object *pchnl, u32 mask);
 static u32 read_data(struct bridge_dev_context *dev_ctxt, void *dest,
-		     void *pSrc, u32 usize);
+		     void *src, u32 usize);
 static u32 write_data(struct bridge_dev_context *dev_ctxt, void *dest,
-		      void *pSrc, u32 usize);
+		      void *src, u32 usize);
 
 /* Bus Addr (cached kernel) */
 static int register_shm_segs(struct io_mgr *hio_mgr,
@@ -919,9 +919,9 @@ static void io_dispatch_pm(struct io_mgr *pio_mgr)
  *      out the dispatch of I/O as a non-preemptible event.It can only be
  *      pre-empted      by an ISR.
  */
-void io_dpc(IN OUT unsigned long pRefData)
+void io_dpc(IN OUT unsigned long ref_data)
 {
-	struct io_mgr *pio_mgr = (struct io_mgr *)pRefData;
+	struct io_mgr *pio_mgr = (struct io_mgr *)ref_data;
 	struct chnl_mgr *chnl_mgr_obj;
 	struct msg_mgr *msg_mgr_obj;
 	struct deh_mgr *hdeh_mgr;
@@ -1702,9 +1702,9 @@ func_end:
  *      Copies buffers from the shared memory to the host buffer.
  */
 static u32 read_data(struct bridge_dev_context *dev_ctxt, void *dest,
-		     void *pSrc, u32 usize)
+		     void *src, u32 usize)
 {
-	memcpy(dest, pSrc, usize);
+	memcpy(dest, src, usize);
 	return usize;
 }
 
@@ -1713,9 +1713,9 @@ static u32 read_data(struct bridge_dev_context *dev_ctxt, void *dest,
  *      Copies buffers from the host side buffer to the shared memory.
  */
 static u32 write_data(struct bridge_dev_context *dev_ctxt, void *dest,
-		      void *pSrc, u32 usize)
+		      void *src, u32 usize)
 {
-	memcpy(dest, pSrc, usize);
+	memcpy(dest, src, usize);
 	return usize;
 }
 
@@ -1793,20 +1793,21 @@ int io_sh_msetting(struct io_mgr *hio_mgr, u8 desc, void *pargs)
  *      Gets the Processor's Load information
  */
 int bridge_io_get_proc_load(IN struct io_mgr *hio_mgr,
-				OUT struct dsp_procloadstat *pProcStat)
+				OUT struct dsp_procloadstat *proc_lstat)
 {
-	pProcStat->curr_load = hio_mgr->shared_mem->load_mon_info.curr_dsp_load;
-	pProcStat->predicted_load =
+	proc_lstat->curr_load =
+			hio_mgr->shared_mem->load_mon_info.curr_dsp_load;
+	proc_lstat->predicted_load =
 	    hio_mgr->shared_mem->load_mon_info.pred_dsp_load;
-	pProcStat->curr_dsp_freq =
+	proc_lstat->curr_dsp_freq =
 	    hio_mgr->shared_mem->load_mon_info.curr_dsp_freq;
-	pProcStat->predicted_freq =
+	proc_lstat->predicted_freq =
 	    hio_mgr->shared_mem->load_mon_info.pred_dsp_freq;
 
 	dev_dbg(bridge, "Curr Load = %d, Pred Load = %d, Curr Freq = %d, "
-		"Pred Freq = %d\n", pProcStat->curr_load,
-		pProcStat->predicted_load, pProcStat->curr_dsp_freq,
-		pProcStat->predicted_freq);
+		"Pred Freq = %d\n", proc_lstat->curr_load,
+		proc_lstat->predicted_load, proc_lstat->curr_dsp_freq,
+		proc_lstat->predicted_freq);
 	return 0;
 }
 
diff --git a/drivers/staging/tidspbridge/hw/hw_mmu.c b/drivers/staging/tidspbridge/hw/hw_mmu.c
index 84a6332..668fb8a 100644
--- a/drivers/staging/tidspbridge/hw/hw_mmu.c
+++ b/drivers/staging/tidspbridge/hw/hw_mmu.c
@@ -85,7 +85,7 @@ static hw_status mmu_flush_entry(const void __iomem *base_address);
  *       TypE		: const u32
  *       Description     : It indicates the page size
  *
- *       Identifier      : preservedBit
+ *       Identifier      : preserved_bit
  *       Type		: const u32
  *       Description     : It indicates the TLB entry is preserved entry
  *							or not
@@ -114,7 +114,7 @@ static hw_status mmu_flush_entry(const void __iomem *base_address);
  */
 static hw_status mmu_set_cam_entry(const void __iomem *base_address,
 				   const u32 page_sz,
-				   const u32 preservedBit,
+				   const u32 preserved_bit,
 				   const u32 validBit,
 				   const u32 virtual_addr_tag);
 
@@ -337,7 +337,7 @@ hw_status hw_mmu_tlb_add(const void __iomem *base_address,
 			 u32 page_sz,
 			 u32 entry_num,
 			 struct hw_mmu_map_attrs_t *map_attrs,
-			 s8 preservedBit, s8 validBit)
+			 s8 preserved_bit, s8 validBit)
 {
 	hw_status status = RET_OK;
 	u32 lock_reg;
@@ -380,7 +380,7 @@ hw_status hw_mmu_tlb_add(const void __iomem *base_address,
 	virtual_addr_tag = ((virtualAddr & MMU_ADDR_MASK) >> 12);
 
 	/* Write the fields in the CAM Entry Register */
-	mmu_set_cam_entry(base_address, mmu_pg_size, preservedBit, validBit,
+	mmu_set_cam_entry(base_address, mmu_pg_size, preserved_bit, validBit,
 			  virtual_addr_tag);
 
 	/* Write the different fields of the RAM Entry Register */
@@ -538,7 +538,7 @@ static hw_status mmu_flush_entry(const void __iomem *base_address)
 /* mmu_set_cam_entry */
 static hw_status mmu_set_cam_entry(const void __iomem *base_address,
 				   const u32 page_sz,
-				   const u32 preservedBit,
+				   const u32 preserved_bit,
 				   const u32 validBit,
 				   const u32 virtual_addr_tag)
 {
@@ -551,7 +551,7 @@ static hw_status mmu_set_cam_entry(const void __iomem *base_address,
 
 	mmu_cam_reg = (virtual_addr_tag << 12);
 	mmu_cam_reg = (mmu_cam_reg) | (page_sz) | (validBit << 2) |
-	    (preservedBit << 3);
+	    (preserved_bit << 3);
 
 	/* write values to register */
 	MMUMMU_CAM_WRITE_REGISTER32(base_address, mmu_cam_reg);
diff --git a/drivers/staging/tidspbridge/hw/hw_mmu.h b/drivers/staging/tidspbridge/hw/hw_mmu.h
index 063efbb..25f1954 100644
--- a/drivers/staging/tidspbridge/hw/hw_mmu.h
+++ b/drivers/staging/tidspbridge/hw/hw_mmu.h
@@ -85,7 +85,7 @@ extern hw_status hw_mmu_tlb_add(const void __iomem *base_address,
 				u32 page_sz,
 				u32 entry_num,
 				struct hw_mmu_map_attrs_t *map_attrs,
-				s8 preservedBit, s8 validBit);
+				s8 preserved_bit, s8 validBit);
 
 /* For PTEs */
 extern hw_status hw_mmu_pte_set(const u32 pg_tbl_va,
diff --git a/drivers/staging/tidspbridge/include/dspbridge/cfg.h b/drivers/staging/tidspbridge/include/dspbridge/cfg.h
index 6fdd229..98cadb1 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/cfg.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/cfg.h
@@ -100,20 +100,20 @@ extern int cfg_get_dev_object(IN struct cfg_devnode *dev_node_obj,
  *  Parameters:
  *      dev_node_obj: Handle to the dev_node who's driver we are querying.
  *      buf_size:       Size of buffer.
- *      pstrExecFile:   Ptr to character buf to hold ExecFile.
+ *      str_exec_file:  Ptr to character buf to hold ExecFile.
  *  Returns:
  *      0:                Success.
- *      -EFAULT:  dev_node_obj is invalid or pstrExecFile is invalid.
+ *      -EFAULT:  dev_node_obj is invalid or str_exec_file is invalid.
  *      -ENODATA: The resource is not available.
  *  Requires:
  *      CFG initialized.
  *  Ensures:
- *      0:    Not more than buf_size bytes were copied into pstrExecFile,
- *                  and *pstrExecFile contains default executable for this
+ *      0:    Not more than buf_size bytes were copied into str_exec_file,
+ *                  and *str_exec_file contains default executable for this
  *                  devnode.
  */
 extern int cfg_get_exec_file(IN struct cfg_devnode *dev_node_obj,
-				    IN u32 buf_size, OUT char *pstrExecFile);
+				    IN u32 buf_size, OUT char *str_exec_file);
 
 /*
  *  ======== cfg_get_object ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/cod.h b/drivers/staging/tidspbridge/include/dspbridge/cod.h
index 0cc1bd2..f8cbb21 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/cod.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/cod.h
@@ -350,7 +350,7 @@ extern int cod_open_base(struct cod_manager *hmgr, IN char *pszCoffPath,
  *  Parameters:
  *      cod_mgr_obj    - manager in which to search for the symbol
  *      pstrSect    - name of the section, with or without leading "."
- *      pstrContent - buffer to store content of the section.
+ *      str_content - buffer to store content of the section.
  *  Returns:
  *      0: on success, error code on failure
  *      -ESPIPE:  Symbols have not been loaded onto the board.
@@ -358,12 +358,12 @@ extern int cod_open_base(struct cod_manager *hmgr, IN char *pszCoffPath,
  *      COD module initialized.
  *      valid cod_mgr_obj.
  *      pstrSect != NULL;
- *      pstrContent != NULL;
+ *      str_content != NULL;
  *  Ensures:
- *      0:  *pstrContent stores the content of the named section.
+ *      0:  *str_content stores the content of the named section.
  */
 extern int cod_read_section(struct cod_libraryobj *lib,
 				   IN char *pstrSect,
-				   OUT char *pstrContent, IN u32 content_size);
+				   OUT char *str_content, IN u32 content_size);
 
 #endif /* COD_ */
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dbll.h b/drivers/staging/tidspbridge/include/dspbridge/dbll.h
index 6378555..a4dea0c 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dbll.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dbll.h
@@ -31,11 +31,11 @@ extern int dbll_create(struct dbll_tar_obj **target_obj,
 extern void dbll_delete(struct dbll_tar_obj *target);
 extern void dbll_exit(void);
 extern bool dbll_get_addr(struct dbll_library_obj *lib, char *name,
-			  struct dbll_sym_val **ppSym);
+			  struct dbll_sym_val **sym_val);
 extern void dbll_get_attrs(struct dbll_tar_obj *target,
 			   struct dbll_attrs *pattrs);
 extern bool dbll_get_c_addr(struct dbll_library_obj *lib, char *name,
-			    struct dbll_sym_val **ppSym);
+			    struct dbll_sym_val **sym_val);
 extern int dbll_get_sect(struct dbll_library_obj *lib, char *name,
 				u32 *paddr, u32 *psize);
 extern bool dbll_init(void);
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h b/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h
index 23eca15..b827320 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dblldefs.h
@@ -239,7 +239,7 @@ typedef void (*dbll_exit_fxn) (void);
  *  Parameters:
  *      lib             - Handle returned from dbll_open().
  *      name            - Name of symbol
- *      ppSym           - Location to store symbol address on output.
+ *      sym_val         - Location to store symbol address on output.
  *  Returns:
  *      TRUE:           Success.
  *      FALSE:          Symbol not found.
@@ -247,11 +247,11 @@ typedef void (*dbll_exit_fxn) (void);
  *      DBL initialized.
  *      Valid library.
  *      name != NULL.
- *      ppSym != NULL.
+ *      sym_val != NULL.
  *  Ensures:
  */
 typedef bool(*dbll_get_addr_fxn) (struct dbll_library_obj *lib, char *name,
-				  struct dbll_sym_val **ppSym);
+				  struct dbll_sym_val **sym_val);
 
 /*
  *  ======== dbll_get_attrs ========
@@ -275,7 +275,7 @@ typedef void (*dbll_get_attrs_fxn) (struct dbll_tar_obj *target,
  *  Parameters:
  *      lib             - Handle returned from dbll_open().
  *      name            - Name of symbol
- *      ppSym           - Location to store symbol address on output.
+ *      sym_val         - Location to store symbol address on output.
  *  Returns:
  *      TRUE:           Success.
  *      FALSE:          Symbol not found.
@@ -283,11 +283,11 @@ typedef void (*dbll_get_attrs_fxn) (struct dbll_tar_obj *target,
  *      DBL initialized.
  *      Valid target.
  *      name != NULL.
- *      ppSym != NULL.
+ *      sym_val != NULL.
  *  Ensures:
  */
 typedef bool(*dbll_get_c_addr_fxn) (struct dbll_library_obj *lib, char *name,
-				    struct dbll_sym_val **ppSym);
+				    struct dbll_sym_val **sym_val);
 
 /*
  *  ======== dbll_get_sect ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dev.h b/drivers/staging/tidspbridge/include/dspbridge/dev.h
index a646402..d658df5 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dev.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dev.h
@@ -367,20 +367,20 @@ extern struct dev_object *dev_get_first(void);
  *  Parameters:
  *      hdev_obj:     Handle to device object created with
  *                      dev_create_device().
- *      *ppIntfFxns:    Ptr to location to store fxn interface.
+ *      *if_fxns:       Ptr to location to store fxn interface.
  *  Returns:
  *      0:        Success.
  *      -EFAULT:    Invalid hdev_obj.
  *  Requires:
- *      ppIntfFxns != NULL.
+ *      if_fxns != NULL.
  *      DEV Initialized.
  *  Ensures:
- *      0:        *ppIntfFxns contains a pointer to the Bridge
+ *      0:        *if_fxns contains a pointer to the Bridge
  *                      driver interface;
- *      else:           *ppIntfFxns is NULL.
+ *      else:           *if_fxns is NULL.
  */
 extern int dev_get_intf_fxns(struct dev_object *hdev_obj,
-			    OUT struct bridge_drv_interface **ppIntfFxns);
+			    OUT struct bridge_drv_interface **if_fxns);
 
 /*
  *  ======== dev_get_io_mgr ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/drv.h b/drivers/staging/tidspbridge/include/dspbridge/drv.h
index 604c15b..b43d22f 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/drv.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/drv.h
@@ -451,7 +451,7 @@ extern void mem_ext_phys_pool_release(void);
  *  Parameters:
  *      byte_size:     Number of bytes to allocate.
  *      ulAlign:    Alignment Mask.
- *      pPhysicalAddress: Physical address of allocated memory.
+ *      physical_address: Physical address of allocated memory.
  *  Returns:
  *      Pointer to a block of memory;
  *      NULL if memory couldn't be allocated, or if byte_size == 0.
@@ -463,7 +463,7 @@ extern void mem_ext_phys_pool_release(void);
  *      location of memory.
  */
 extern void *mem_alloc_phys_mem(IN u32 byte_size,
-				IN u32 ulAlign, OUT u32 *pPhysicalAddress);
+				IN u32 ulAlign, OUT u32 *physical_address);
 
 /*
  *  ======== mem_free_phys_mem ========
@@ -472,7 +472,7 @@ extern void *mem_alloc_phys_mem(IN u32 byte_size,
  *  Parameters:
  *      pVirtualAddress:  Pointer to virtual memory region allocated
  *      by mem_alloc_phys_mem().
- *      pPhysicalAddress:  Pointer to physical memory region  allocated
+ *      physical_address:  Pointer to physical memory region  allocated
  *      by mem_alloc_phys_mem().
  *      byte_size:  Size of the memory region allocated by mem_alloc_phys_mem().
  *  Returns:
@@ -484,14 +484,14 @@ extern void *mem_alloc_phys_mem(IN u32 byte_size,
  *      pVirtualAddress is no longer a valid pointer to memory.
  */
 extern void mem_free_phys_mem(void *pVirtualAddress,
-			      u32 pPhysicalAddress, u32 byte_size);
+			      u32 physical_address, u32 byte_size);
 
 /*
  *  ======== MEM_LINEAR_ADDRESS ========
  *  Purpose:
  *      Get the linear address corresponding to the given physical address.
  *  Parameters:
- *      pPhysAddr:  Physical address to be mapped.
+ *      phys_addr:  Physical address to be mapped.
  *      byte_size:     Number of bytes in physical range to map.
  *  Returns:
  *      The corresponding linear address, or NULL if unsuccessful.
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dspapi.h b/drivers/staging/tidspbridge/include/dspbridge/dspapi.h
index f84ac69..765a175 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dspapi.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dspapi.h
@@ -42,7 +42,7 @@
  *  Parameters:
  *      cmd:        IOCTL id, base 0.
  *      args:       Argument structure.
- *      pResult:
+ *      result:
  *  Returns:
  *      0 if command called; -EINVAL if command not in IOCTL
  *      table.
@@ -51,7 +51,7 @@
  */
 extern int api_call_dev_ioctl(unsigned int cmd,
 				      union Trapped_Args *args,
-				      u32 *pResult, void *pr_ctxt);
+				      u32 *result, void *pr_ctxt);
 
 /*
  *  ======== api_init ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dspdefs.h b/drivers/staging/tidspbridge/include/dspbridge/dspdefs.h
index 04df01d..ed6388e 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dspdefs.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dspdefs.h
@@ -787,7 +787,7 @@ typedef int(*fxn_io_onloaded) (struct io_mgr *hio_mgr);
  *      Called to get the Processor's current and predicted load
  *  Parameters:
  *      hio_mgr:     IO Manager.
- *      pProcLoadStat   Processor Load statistics
+ *      proc_load_stat   Processor Load statistics
  *  Returns:
  *      0:    Success.
  *      -EPERM:  Internal failure occurred.
@@ -797,7 +797,7 @@ typedef int(*fxn_io_onloaded) (struct io_mgr *hio_mgr);
  */
 typedef int(*fxn_io_getprocload) (struct io_mgr *hio_mgr,
 					 struct dsp_procloadstat *
-					 pProcLoadStat);
+					 proc_load_stat);
 
 /*
  *  ======== bridge_msg_create ========
diff --git a/drivers/staging/tidspbridge/include/dspbridge/dspio.h b/drivers/staging/tidspbridge/include/dspbridge/dspio.h
index 93dc592..2b9e19c 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/dspio.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/dspio.h
@@ -36,6 +36,6 @@ extern int bridge_io_on_loaded(struct io_mgr *hio_mgr);
 
 extern int iva_io_on_loaded(struct io_mgr *hio_mgr);
 extern int bridge_io_get_proc_load(IN struct io_mgr *hio_mgr,
-				       OUT struct dsp_procloadstat *pProcStat);
+				       OUT struct dsp_procloadstat *proc_lstat);
 
 #endif /* DSPIO_ */
diff --git a/drivers/staging/tidspbridge/include/dspbridge/io_sm.h b/drivers/staging/tidspbridge/include/dspbridge/io_sm.h
index 7e598ee..1627e0a 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/io_sm.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/io_sm.h
@@ -68,7 +68,7 @@ extern void io_cancel_chnl(struct io_mgr *hio_mgr, u32 ulChnl);
  *      Deferred procedure call for shared memory channel driver ISR.  Carries
  *      out the dispatch of I/O.
  *  Parameters:
- *      pRefData:   Pointer to reference data registered via a call to
+ *      ref_data:   Pointer to reference data registered via a call to
  *                  DPC_Create().
  *  Returns:
  *  Requires:
@@ -78,7 +78,7 @@ extern void io_cancel_chnl(struct io_mgr *hio_mgr, u32 ulChnl);
  *  Ensures:
  *      Non-preemptible (but interruptible).
  */
-extern void io_dpc(IN OUT unsigned long pRefData);
+extern void io_dpc(IN OUT unsigned long ref_data);
 
 /*
  *  ======== io_mbox_msg ========
@@ -87,7 +87,7 @@ extern void io_dpc(IN OUT unsigned long pRefData);
  *      Calls the Bridge's chnlsm_isr to determine if this interrupt is ours,
  *      then schedules a DPC to dispatch I/O.
  *  Parameters:
- *      pRefData:   Pointer to the channel manager object for this board.
+ *      ref_data:   Pointer to the channel manager object for this board.
  *                  Set in an initial call to ISR_Install().
  *  Returns:
  *      TRUE if interrupt handled; FALSE otherwise.
diff --git a/drivers/staging/tidspbridge/include/dspbridge/proc.h b/drivers/staging/tidspbridge/include/dspbridge/proc.h
index cbd26dc..5583bd5 100644
--- a/drivers/staging/tidspbridge/include/dspbridge/proc.h
+++ b/drivers/staging/tidspbridge/include/dspbridge/proc.h
@@ -265,7 +265,7 @@ extern int proc_get_state(void *hprocessor, OUT struct dsp_processorstate
  *      Report the state of the specified DSP processor.
  *  Parameters:
  *      hprocessor  :   The processor handle.
- *      procID      :   Processor ID
+ *      proc_id      :   Processor ID
  *
  *  Returns:
  *      0     :   Success.
@@ -278,7 +278,7 @@ extern int proc_get_state(void *hprocessor, OUT struct dsp_processorstate
  *  Ensures:
  *  Details:
  */
-extern int proc_get_processor_id(void *hprocessor, u32 * procID);
+extern int proc_get_processor_id(void *hprocessor, u32 * proc_id);
 
 /*
  *  ======== proc_get_trace ========
diff --git a/drivers/staging/tidspbridge/pmgr/cod.c b/drivers/staging/tidspbridge/pmgr/cod.c
index ab54388..e4fc065 100644
--- a/drivers/staging/tidspbridge/pmgr/cod.c
+++ b/drivers/staging/tidspbridge/pmgr/cod.c
@@ -215,7 +215,7 @@ void cod_close(struct cod_libraryobj *lib)
  *      dynamically loaded object files.
  *
  */
-int cod_create(OUT struct cod_manager **mgr, char *pstrDummyFile,
+int cod_create(OUT struct cod_manager **mgr, char *str_dummy_file,
 		      IN OPTIONAL CONST struct cod_attrs *attrs)
 {
 	struct cod_manager *mgr_new;
@@ -626,7 +626,7 @@ int cod_open_base(struct cod_manager *hmgr, IN char *pszCoffPath,
  *      Retrieve the content of a code section given the section name.
  */
 int cod_read_section(struct cod_libraryobj *lib, IN char *pstrSect,
-			    OUT char *pstrContent, IN u32 content_size)
+			    OUT char *str_content, IN u32 content_size)
 {
 	int status = 0;
 
@@ -634,12 +634,12 @@ int cod_read_section(struct cod_libraryobj *lib, IN char *pstrSect,
 	DBC_REQUIRE(lib != NULL);
 	DBC_REQUIRE(IS_VALID(lib->cod_mgr));
 	DBC_REQUIRE(pstrSect != NULL);
-	DBC_REQUIRE(pstrContent != NULL);
+	DBC_REQUIRE(str_content != NULL);
 
 	if (lib != NULL)
 		status =
 		    lib->cod_mgr->fxns.read_sect_fxn(lib->dbll_lib, pstrSect,
-						     pstrContent, content_size);
+						     str_content, content_size);
 	else
 		status = -ESPIPE;
 
diff --git a/drivers/staging/tidspbridge/pmgr/dbll.c b/drivers/staging/tidspbridge/pmgr/dbll.c
index 45133e0..e94ef6b 100644
--- a/drivers/staging/tidspbridge/pmgr/dbll.c
+++ b/drivers/staging/tidspbridge/pmgr/dbll.c
@@ -300,7 +300,7 @@ void dbll_exit(void)
  *  Get address of name in the specified library.
  */
 bool dbll_get_addr(struct dbll_library_obj *zl_lib, char *name,
-		   struct dbll_sym_val **ppSym)
+		   struct dbll_sym_val **sym_val)
 {
 	struct dbll_symbol *sym;
 	bool status = false;
@@ -308,17 +308,17 @@ bool dbll_get_addr(struct dbll_library_obj *zl_lib, char *name,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(zl_lib);
 	DBC_REQUIRE(name != NULL);
-	DBC_REQUIRE(ppSym != NULL);
+	DBC_REQUIRE(sym_val != NULL);
 	DBC_REQUIRE(zl_lib->sym_tab != NULL);
 
 	sym = (struct dbll_symbol *)gh_find(zl_lib->sym_tab, name);
 	if (sym != NULL) {
-		*ppSym = &sym->value;
+		*sym_val = &sym->value;
 		status = true;
 	}
 
 	dev_dbg(bridge, "%s: lib: %p name: %s paddr: %p, status 0x%x\n",
-		__func__, zl_lib, name, ppSym, status);
+		__func__, zl_lib, name, sym_val, status);
 	return status;
 }
 
@@ -344,7 +344,7 @@ void dbll_get_attrs(struct dbll_tar_obj *target, struct dbll_attrs *pattrs)
  *  Get address of a "C" name in the specified library.
  */
 bool dbll_get_c_addr(struct dbll_library_obj *zl_lib, char *name,
-		     struct dbll_sym_val **ppSym)
+		     struct dbll_sym_val **sym_val)
 {
 	struct dbll_symbol *sym;
 	char cname[MAXEXPR + 1];
@@ -352,7 +352,7 @@ bool dbll_get_c_addr(struct dbll_library_obj *zl_lib, char *name,
 
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(zl_lib);
-	DBC_REQUIRE(ppSym != NULL);
+	DBC_REQUIRE(sym_val != NULL);
 	DBC_REQUIRE(zl_lib->sym_tab != NULL);
 	DBC_REQUIRE(name != NULL);
 
@@ -365,7 +365,7 @@ bool dbll_get_c_addr(struct dbll_library_obj *zl_lib, char *name,
 	sym = (struct dbll_symbol *)gh_find(zl_lib->sym_tab, cname);
 
 	if (sym != NULL) {
-		*ppSym = &sym->value;
+		*sym_val = &sym->value;
 		status = true;
 	}
 
diff --git a/drivers/staging/tidspbridge/pmgr/dev.c b/drivers/staging/tidspbridge/pmgr/dev.c
index 50fedcc..5098f7f 100644
--- a/drivers/staging/tidspbridge/pmgr/dev.c
+++ b/drivers/staging/tidspbridge/pmgr/dev.c
@@ -585,26 +585,26 @@ struct dev_object *dev_get_first(void)
  *  ======== dev_get_intf_fxns ========
  *  Purpose:
  *      Retrieve the Bridge interface function structure for the loaded driver.
- *      ppIntfFxns != NULL.
+ *      if_fxns != NULL.
  */
 int dev_get_intf_fxns(struct dev_object *hdev_obj,
-			     OUT struct bridge_drv_interface **ppIntfFxns)
+			     OUT struct bridge_drv_interface **if_fxns)
 {
 	int status = 0;
 	struct dev_object *dev_obj = hdev_obj;
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(ppIntfFxns != NULL);
+	DBC_REQUIRE(if_fxns != NULL);
 
 	if (hdev_obj) {
-		*ppIntfFxns = &dev_obj->bridge_interface;
+		*if_fxns = &dev_obj->bridge_interface;
 	} else {
-		*ppIntfFxns = NULL;
+		*if_fxns = NULL;
 		status = -EFAULT;
 	}
 
-	DBC_ENSURE(DSP_SUCCEEDED(status) || ((ppIntfFxns != NULL) &&
-					     (*ppIntfFxns == NULL)));
+	DBC_ENSURE(DSP_SUCCEEDED(status) || ((if_fxns != NULL) &&
+					     (*if_fxns == NULL)));
 	return status;
 }
 
diff --git a/drivers/staging/tidspbridge/rmgr/drv.c b/drivers/staging/tidspbridge/rmgr/drv.c
index ef147b7..f38123d 100644
--- a/drivers/staging/tidspbridge/rmgr/drv.c
+++ b/drivers/staging/tidspbridge/rmgr/drv.c
@@ -969,7 +969,7 @@ void mem_ext_phys_pool_release(void)
  *     Allocate physically contiguous, uncached memory from external memory pool
  */
 
-static void *mem_ext_phys_mem_alloc(u32 bytes, u32 align, OUT u32 * pPhysAddr)
+static void *mem_ext_phys_mem_alloc(u32 bytes, u32 align, OUT u32 * phys_addr)
 {
 	u32 new_alloc_ptr;
 	u32 offset;
@@ -980,7 +980,7 @@ static void *mem_ext_phys_mem_alloc(u32 bytes, u32 align, OUT u32 * pPhysAddr)
 
 	if (bytes > ((ext_mem_pool.phys_mem_base + ext_mem_pool.phys_mem_size)
 		     - ext_mem_pool.next_phys_alloc_ptr)) {
-		pPhysAddr = NULL;
+		phys_addr = NULL;
 		return NULL;
 	} else {
 		offset = (ext_mem_pool.next_phys_alloc_ptr & (align - 1));
@@ -992,7 +992,7 @@ static void *mem_ext_phys_mem_alloc(u32 bytes, u32 align, OUT u32 * pPhysAddr)
 		if ((new_alloc_ptr + bytes) <=
 		    (ext_mem_pool.phys_mem_base + ext_mem_pool.phys_mem_size)) {
 			/* we can allocate */
-			*pPhysAddr = new_alloc_ptr;
+			*phys_addr = new_alloc_ptr;
 			ext_mem_pool.next_phys_alloc_ptr =
 			    new_alloc_ptr + bytes;
 			virt_addr =
@@ -1001,7 +1001,7 @@ static void *mem_ext_phys_mem_alloc(u32 bytes, u32 align, OUT u32 * pPhysAddr)
 							  phys_mem_base);
 			return (void *)virt_addr;
 		} else {
-			*pPhysAddr = 0;
+			*phys_addr = 0;
 			return NULL;
 		}
 	}
@@ -1012,7 +1012,7 @@ static void *mem_ext_phys_mem_alloc(u32 bytes, u32 align, OUT u32 * pPhysAddr)
  *  Purpose:
  *      Allocate physically contiguous, uncached memory
  */
-void *mem_alloc_phys_mem(u32 byte_size, u32 ulAlign, OUT u32 * pPhysicalAddress)
+void *mem_alloc_phys_mem(u32 byte_size, u32 ulAlign, OUT u32 * physical_address)
 {
 	void *va_mem = NULL;
 	dma_addr_t pa_mem;
@@ -1025,9 +1025,9 @@ void *mem_alloc_phys_mem(u32 byte_size, u32 ulAlign, OUT u32 * pPhysicalAddress)
 			va_mem = dma_alloc_coherent(NULL, byte_size, &pa_mem,
 								GFP_KERNEL);
 		if (va_mem == NULL)
-			*pPhysicalAddress = 0;
+			*physical_address = 0;
 		else
-			*pPhysicalAddress = pa_mem;
+			*physical_address = pa_mem;
 	}
 	return va_mem;
 }
@@ -1037,12 +1037,12 @@ void *mem_alloc_phys_mem(u32 byte_size, u32 ulAlign, OUT u32 * pPhysicalAddress)
  *  Purpose:
  *      Free the given block of physically contiguous memory.
  */
-void mem_free_phys_mem(void *pVirtualAddress, u32 pPhysicalAddress,
+void mem_free_phys_mem(void *pVirtualAddress, u32 physical_address,
 		       u32 byte_size)
 {
 	DBC_REQUIRE(pVirtualAddress != NULL);
 
 	if (!ext_phys_mem_pool_enabled)
 		dma_free_coherent(NULL, byte_size, pVirtualAddress,
-				  pPhysicalAddress);
+				  physical_address);
 }
diff --git a/drivers/staging/tidspbridge/rmgr/nldr.c b/drivers/staging/tidspbridge/rmgr/nldr.c
index f385cbc..0c8a165 100644
--- a/drivers/staging/tidspbridge/rmgr/nldr.c
+++ b/drivers/staging/tidspbridge/rmgr/nldr.c
@@ -289,7 +289,7 @@ static int add_ovly_node(struct dsp_uuid *uuid_obj,
 				enum dsp_dcdobjtype obj_type, IN void *handle);
 static int add_ovly_sect(struct nldr_object *nldr_obj,
 				struct ovly_sect **lst,
-				struct dbll_sect_info *pSectInfo,
+				struct dbll_sect_info *sect_inf,
 				bool *exists, u32 addr, u32 bytes);
 static s32 fake_ovly_write(void *handle, u32 dsp_address, void *buf, u32 bytes,
 			   s32 mtype);
@@ -304,11 +304,11 @@ static int load_lib(struct nldr_nodeobject *nldr_node_obj,
 			   enum nldr_phase phase, u16 depth);
 static int load_ovly(struct nldr_nodeobject *nldr_node_obj,
 			    enum nldr_phase phase);
-static int remote_alloc(void **pRef, u16 mem_sect_type, u32 size,
+static int remote_alloc(void **ref, u16 mem_sect_type, u32 size,
 			       u32 align, u32 *dsp_address,
 			       OPTIONAL s32 segmentId,
 			       OPTIONAL s32 req, bool reserve);
-static int remote_free(void **pRef, u16 space, u32 dsp_address, u32 size,
+static int remote_free(void **ref, u16 space, u32 dsp_address, u32 size,
 			      bool reserve);
 
 static void unload_lib(struct nldr_nodeobject *nldr_node_obj,
@@ -1072,7 +1072,7 @@ func_end:
  */
 static int add_ovly_sect(struct nldr_object *nldr_obj,
 				struct ovly_sect **lst,
-				struct dbll_sect_info *pSectInfo,
+				struct dbll_sect_info *sect_inf,
 				bool *exists, u32 addr, u32 bytes)
 {
 	struct ovly_sect *new_sect = NULL;
@@ -1103,10 +1103,10 @@ static int add_ovly_sect(struct nldr_object *nldr_obj,
 			status = -ENOMEM;
 		} else {
 			new_sect->sect_load_addr = addr;
-			new_sect->sect_run_addr = pSectInfo->sect_run_addr +
-			    (addr - pSectInfo->sect_load_addr);
+			new_sect->sect_run_addr = sect_inf->sect_run_addr +
+			    (addr - sect_inf->sect_load_addr);
 			new_sect->size = bytes;
-			new_sect->page = pSectInfo->type;
+			new_sect->page = sect_inf->type;
 		}
 
 		/* Add to the list */
@@ -1623,12 +1623,12 @@ func_end:
 /*
  *  ======== remote_alloc ========
  */
-static int remote_alloc(void **pRef, u16 space, u32 size,
+static int remote_alloc(void **ref, u16 space, u32 size,
 			       u32 align, u32 *dsp_address,
 			       OPTIONAL s32 segmentId, OPTIONAL s32 req,
 			       bool reserve)
 {
-	struct nldr_nodeobject *hnode = (struct nldr_nodeobject *)pRef;
+	struct nldr_nodeobject *hnode = (struct nldr_nodeobject *)ref;
 	struct nldr_object *nldr_obj;
 	struct rmm_target_obj *rmm;
 	u16 mem_phase_bit = MAXFLAGS;
@@ -1744,10 +1744,10 @@ func_cont:
 	return status;
 }
 
-static int remote_free(void **pRef, u16 space, u32 dsp_address,
+static int remote_free(void **ref, u16 space, u32 dsp_address,
 			      u32 size, bool reserve)
 {
-	struct nldr_object *nldr_obj = (struct nldr_object *)pRef;
+	struct nldr_object *nldr_obj = (struct nldr_object *)ref;
 	struct rmm_target_obj *rmm;
 	u32 word_size;
 	int status = -ENOMEM;	/* Set to fail */
diff --git a/drivers/staging/tidspbridge/rmgr/proc.c b/drivers/staging/tidspbridge/rmgr/proc.c
index 20f887b..eb81645 100644
--- a/drivers/staging/tidspbridge/rmgr/proc.c
+++ b/drivers/staging/tidspbridge/rmgr/proc.c
@@ -1921,13 +1921,13 @@ func_end:
  *  Purpose:
  *      Retrieves the processor ID.
  */
-int proc_get_processor_id(void *proc, u32 * procID)
+int proc_get_processor_id(void *proc, u32 * proc_id)
 {
 	int status = 0;
 	struct proc_object *p_proc_object = (struct proc_object *)proc;
 
 	if (p_proc_object)
-		*procID = p_proc_object->processor_id;
+		*proc_id = p_proc_object->processor_id;
 	else
 		status = -EFAULT;
 
diff --git a/drivers/staging/tidspbridge/services/cfg.c b/drivers/staging/tidspbridge/services/cfg.c
index 53ede23..ac23b09 100644
--- a/drivers/staging/tidspbridge/services/cfg.c
+++ b/drivers/staging/tidspbridge/services/cfg.c
@@ -112,7 +112,7 @@ int cfg_get_dev_object(struct cfg_devnode *dev_node_obj,
  *      Retreive the default executable, if any, for this board.
  */
 int cfg_get_exec_file(struct cfg_devnode *dev_node_obj, u32 ul_buf_size,
-			     OUT char *pstrExecFile)
+			     OUT char *str_exec_file)
 {
 	int status = 0;
 	struct drv_data *drv_datap = dev_get_drvdata(bridge);
@@ -120,19 +120,19 @@ int cfg_get_exec_file(struct cfg_devnode *dev_node_obj, u32 ul_buf_size,
 	if (!dev_node_obj)
 		status = -EFAULT;
 
-	else if (!pstrExecFile || !drv_datap)
+	else if (!str_exec_file || !drv_datap)
 		status = -EFAULT;
 
 	if (strlen(drv_datap->base_img) > ul_buf_size)
 		status = -EINVAL;
 
 	if (DSP_SUCCEEDED(status) && drv_datap->base_img)
-		strcpy(pstrExecFile, drv_datap->base_img);
+		strcpy(str_exec_file, drv_datap->base_img);
 
 	if (DSP_FAILED(status))
 		pr_err("%s: Failed, status 0x%x\n", __func__, status);
 	DBC_ENSURE(((status == 0) &&
-		    (strlen(pstrExecFile) <= ul_buf_size))
+		    (strlen(str_exec_file) <= ul_buf_size))
 		   || (status != 0));
 	return status;
 }
-- 
1.7.0.4

