From 4973f82ce960f717b7e0c07bbb49ac5798e3a1ea Mon Sep 17 00:00:00 2001
From: Steve Sakoman <steve@sakoman.com>
Date: Tue, 11 Jan 2011 14:30:24 -0800
Subject: [PATCH 210/214] ARM: OMAP: Add initial support for Rockhopper

---
 arch/arm/mach-omap2/Kconfig            |    6 +
 arch/arm/mach-omap2/Makefile           |    4 +
 arch/arm/mach-omap2/board-rockhopper.c |  361 ++++++++++++++++++++++++++++++++
 sound/soc/omap/omap3beagle.c           |    5 +-
 4 files changed, 374 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/mach-omap2/board-rockhopper.c

diff --git a/arch/arm/mach-omap2/Kconfig b/arch/arm/mach-omap2/Kconfig
index 19d5891..860122e 100644
--- a/arch/arm/mach-omap2/Kconfig
+++ b/arch/arm/mach-omap2/Kconfig
@@ -307,6 +307,12 @@ config MACH_TI8168EVM
 	depends on SOC_OMAPTI816X
 	default y
 
+config MACH_ROCKHOPPER
+	bool "Rockhopper board"
+	depends on ARCH_OMAP3
+	default y
+	select OMAP_PACKAGE_CBB
+
 config MACH_OMAP_4430SDP
 	bool "OMAP 4430 SDP board"
 	default y
diff --git a/arch/arm/mach-omap2/Makefile b/arch/arm/mach-omap2/Makefile
index b8e1c5c..e84c1e6 100644
--- a/arch/arm/mach-omap2/Makefile
+++ b/arch/arm/mach-omap2/Makefile
@@ -257,6 +257,10 @@ obj-$(CONFIG_MACH_CRANEBOARD)		+= board-am3517crane.o
 obj-$(CONFIG_MACH_SBC3530)		+= board-omap3stalker.o \
 					   hsmmc.o
 obj-$(CONFIG_MACH_TI8168EVM)		+= board-ti8168evm.o
+obj-$(CONFIG_MACH_ROCKHOPPER)		+= board-rockhopper.o \
+					   hsmmc.o
+
+
 # Platform specific device init code
 usbfs-$(CONFIG_ARCH_OMAP_OTG)		:= usb-fs.o
 obj-y					+= $(usbfs-m) $(usbfs-y)
diff --git a/arch/arm/mach-omap2/board-rockhopper.c b/arch/arm/mach-omap2/board-rockhopper.c
new file mode 100644
index 0000000..4df73f1
--- /dev/null
+++ b/arch/arm/mach-omap2/board-rockhopper.c
@@ -0,0 +1,361 @@
+/*
+ * linux/arch/arm/mach-omap2/board-rockhopper.c
+ *
+ * Rockhopper board
+ * (C) Copyright 2011 D&H Global Enterprise, LLC
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/irq.h>
+#include <linux/input.h>
+#include <linux/gpio_keys.h>
+#include <linux/opp.h>
+#include <linux/spi/spi.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/mtd/nand.h>
+#include <linux/mmc/host.h>
+
+#include <linux/regulator/machine.h>
+#include <linux/i2c/twl.h>
+
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/mach/flash.h>
+
+#include <plat/board.h>
+#include <plat/common.h>
+#include <video/omapdss.h>
+#include <video/omap-panel-generic-dpi.h>
+#include <plat/gpmc.h>
+#include <plat/nand.h>
+#include <plat/usb.h>
+#include <plat/omap_device.h>
+#include <plat/mcspi.h>
+
+#include "mux.h"
+#include "hsmmc.h"
+#include "pm.h"
+#include "common-board-devices.h"
+
+#include "sdram-micron-mt46h32m32lf-6.h"
+
+static struct mtd_partition rockhopper_nand_partitions[] = {
+	/* All the partition sizes are listed in terms of NAND block size */
+	{
+		.name		= "X-Loader",
+		.offset		= 0,
+		.size		= 4 * NAND_BLOCK_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	{
+		.name		= "U-Boot",
+		.offset		= MTDPART_OFS_APPEND,	/* Offset = 0x80000 */
+		.size		= 14 * NAND_BLOCK_SIZE,
+	},
+	{
+		.name		= "U-Boot Env",
+		.offset		= MTDPART_OFS_APPEND,	/* Offset = 0x240000 */
+		.size		= 2 * NAND_BLOCK_SIZE,
+	},
+	{
+		.name		= "Kernel",
+		.offset		= MTDPART_OFS_APPEND,	/* Offset = 0x280000 */
+		.size		= 32 * NAND_BLOCK_SIZE,
+	},
+	{
+		.name		= "File System",
+		.offset		= MTDPART_OFS_APPEND,	/* Offset = 0x680000 */
+		.size		= MTDPART_SIZ_FULL,
+	},
+};
+
+/* DSS */
+
+static int rockhopper_enable_dvi(struct omap_dss_device *dssdev)
+{
+	if (gpio_is_valid(170))
+		gpio_set_value(170, 1);
+
+	return 0;
+}
+
+static void rockhopper_disable_dvi(struct omap_dss_device *dssdev)
+{
+	if (gpio_is_valid(170))
+		gpio_set_value(170, 0);
+}
+
+static struct panel_generic_dpi_data dvi_panel = {
+	.name = "generic",
+	.platform_enable = rockhopper_enable_dvi,
+	.platform_disable = rockhopper_disable_dvi,
+};
+
+static struct omap_dss_device rockhopper_dvi_device = {
+	.type = OMAP_DISPLAY_TYPE_DPI,
+	.name = "dvi",
+	.driver_name = "generic_dpi_panel",
+	.data = &dvi_panel,
+	.phy.dpi.data_lines = 24,
+};
+
+static struct omap_dss_device rockhopper_tv_device = {
+	.name = "tv",
+	.driver_name = "venc",
+	.type = OMAP_DISPLAY_TYPE_VENC,
+	.phy.venc.type = OMAP_DSS_VENC_TYPE_SVIDEO,
+};
+
+static struct omap_dss_device *rockhopper_dss_devices[] = {
+	&rockhopper_dvi_device,
+	&rockhopper_tv_device,
+};
+
+static struct omap_dss_board_info rockhopper_dss_data = {
+	.num_devices = ARRAY_SIZE(rockhopper_dss_devices),
+	.devices = rockhopper_dss_devices,
+	.default_device = &rockhopper_dvi_device,
+};
+
+static struct omap2_hsmmc_info mmc[] = {
+	{
+		.mmc		= 1,
+		.caps		= MMC_CAP_4_BIT_DATA | MMC_CAP_8_BIT_DATA,
+		.gpio_wp	= 29,
+	},
+	{}	/* Terminator */
+};
+
+static struct regulator_consumer_supply rockhopper_vmmc1_supply[] = {
+	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.0"),
+};
+
+static struct regulator_consumer_supply rockhopper_vsim_supply[] = {
+	REGULATOR_SUPPLY("vmmc_aux", "omap_hsmmc.0"),
+};
+
+static struct gpio_led gpio_leds[];
+
+static int rockhopper_twl_gpio_setup(struct device *dev,
+		unsigned gpio, unsigned ngpio)
+{
+	/* gpio.0 is "mmc0_cd" (input/IRQ) */
+	mmc[0].gpio_cd = gpio + 0;
+	omap2_hsmmc_init(mmc);
+
+	/* TWL4030_GPIO_MAX + 1 == ledB, PMU_STAT (out, active low LED) */
+	gpio_leds[0].gpio = gpio + TWL4030_GPIO_MAX + 1;
+
+	return 0;
+}
+
+static struct twl4030_gpio_platform_data rockhopper_gpio_data = {
+	.gpio_base	= OMAP_MAX_GPIO_LINES,
+	.irq_base	= TWL4030_GPIO_IRQ_BASE,
+	.irq_end	= TWL4030_GPIO_IRQ_END,
+	.use_leds	= true,
+	.setup		= rockhopper_twl_gpio_setup,
+};
+
+/* VMMC1 for MMC1 pins CMD, CLK, DAT0..DAT3 (20 mA, plus card == max 220 mA) */
+static struct regulator_init_data rockhopper_vmmc1 = {
+	.constraints = {
+		.min_uV			= 1850000,
+		.max_uV			= 3150000,
+		.valid_modes_mask	= REGULATOR_MODE_NORMAL
+					| REGULATOR_MODE_STANDBY,
+		.valid_ops_mask		= REGULATOR_CHANGE_VOLTAGE
+					| REGULATOR_CHANGE_MODE
+					| REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(rockhopper_vmmc1_supply),
+	.consumer_supplies	= &rockhopper_vmmc1_supply,
+};
+
+static struct twl4030_platform_data rockhopper_twldata = {
+	/* platform_data for children goes here */
+	.gpio		= &rockhopper_gpio_data,
+	.vmmc1		= &rockhopper_vmmc1,
+};
+
+static int __init rockhopper_i2c_init(void)
+{
+	omap3_pmic_get_config(&rockhopper_twldata,
+			TWL_COMMON_PDATA_USB | TWL_COMMON_PDATA_AUDIO | TWL_COMMON_PDATA_MADC,
+			TWL_COMMON_REGULATOR_VDAC | TWL_COMMON_REGULATOR_VPLL2);
+	rockhopper_twldata.vpll2->constraints.name = "VDVI";
+	omap3_pmic_init("tps65950", &rockhopper_twldata);
+
+	omap_register_i2c_bus(2, 400, NULL, 0);
+	/* Bus 3 is attached to the DVI port where devices like the pico DLP
+	 * projector don't work reliably with 400kHz */
+	omap_register_i2c_bus(3, 100, NULL, 0);
+	return 0;
+}
+
+static struct spi_board_info rockhopper_spi_board_info[] __initdata = {
+	{
+		.modalias		= "spidev",
+		.bus_num		= 2,
+		.chip_select		= 0,
+		.max_speed_hz		= 48000000,
+		.mode			= SPI_MODE_0,
+	},
+};
+
+static int __init rockhopper_spi_init(void)
+{
+	spi_register_board_info(rockhopper_spi_board_info,
+			ARRAY_SIZE(rockhopper_spi_board_info));
+	return 0;
+}
+
+static struct gpio_led gpio_leds[] = {
+	{
+		.name			= "rockhopperboard:green:com",
+		.default_trigger	= "mmc0",
+		.gpio			= -EINVAL,	/* gets replaced */
+		.active_low		= true,
+	},
+};
+
+static struct gpio_led_platform_data gpio_led_info = {
+	.leds		= gpio_leds,
+	.num_leds	= ARRAY_SIZE(gpio_leds),
+};
+
+static struct platform_device leds_gpio = {
+	.name	= "leds-gpio",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &gpio_led_info,
+	},
+};
+
+static struct gpio_keys_button gpio_buttons[] = {
+	{
+		.code			= BTN_EXTRA,
+		.gpio			= 7,
+		.desc			= "user",
+		.wakeup			= 1,
+	},
+};
+
+static struct gpio_keys_platform_data gpio_key_info = {
+	.buttons	= gpio_buttons,
+	.nbuttons	= ARRAY_SIZE(gpio_buttons),
+};
+
+static struct platform_device keys_gpio = {
+	.name	= "gpio-keys",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &gpio_key_info,
+	},
+};
+
+static void __init rockhopper_init_early(void)
+{
+	omap2_init_common_infrastructure();
+	omap2_init_common_devices(mt46h32m32lf6_sdrc_params,
+				  mt46h32m32lf6_sdrc_params);
+}
+
+static void __init rockhopper_init_irq(void)
+{
+	omap3_init_irq();
+}
+
+static struct platform_device *rockhopper_devices[] __initdata = {
+	&leds_gpio,
+	&keys_gpio,
+};
+
+static const struct usbhs_omap_board_data usbhs_bdata __initconst = {
+
+	.port_mode[0] = OMAP_EHCI_PORT_MODE_PHY,
+	.port_mode[1] = OMAP_USBHS_PORT_MODE_UNUSED,
+	.port_mode[2] = OMAP_USBHS_PORT_MODE_UNUSED,
+
+	.phy_reset  = true,
+	.reset_gpio_port[0]  = 27,
+	.reset_gpio_port[1]  = -EINVAL,
+	.reset_gpio_port[2]  = -EINVAL
+};
+
+#ifdef CONFIG_OMAP_MUX
+static struct omap_board_mux board_mux[] __initdata = {
+	{ .reg_offset = OMAP_MUX_TERMINATOR },
+};
+#endif
+
+static void __init rockhopper_opp_init(void)
+{
+	if (omap3_opp_init())
+		pr_err("%s: opp default init failed\n", __func__);
+}
+
+static struct omap_musb_board_data musb_board_data = {
+	.interface_type		= MUSB_INTERFACE_ULPI,
+#if defined(CONFIG_USB_MUSB_OTG)
+	.mode			= MUSB_OTG,
+#elif defined(CONFIG_USB_GADGET_MUSB_HDRC)
+	.mode			= MUSB_PERIPHERAL,
+#else
+	.mode			= MUSB_HOST,
+#endif
+	.power			= 100,
+};
+
+static void __init rockhopper_init(void)
+{
+	omap3_mux_init(board_mux, OMAP_PACKAGE_CBB);
+	rockhopper_i2c_init();
+	rockhopper_spi_init();
+	platform_add_devices(rockhopper_devices,
+			ARRAY_SIZE(rockhopper_devices));
+	gpio_request_one(170, GPIOF_OUT_INIT_HIGH, "DVI_nPD");
+	gpio_export(170, 0);
+	omap_display_init(&rockhopper_dss_data);
+	omap_serial_init();
+
+	usb_musb_init(&musb_board_data);
+	usbhs_init(&usbhs_bdata);
+	omap_nand_flash_init(NAND_BUSWIDTH_16, rockhopper_nand_partitions,
+			     ARRAY_SIZE(rockhopper_nand_partitions));
+
+	/* Ensure msecure is mux'd to be able to set the RTC. */
+	omap_mux_init_signal("sys_drm_msecure", OMAP_PIN_OFF_OUTPUT_HIGH);
+
+	/* Ensure SDRC pins are mux'd for self-refresh */
+	omap_mux_init_signal("sdrc_cke0", OMAP_PIN_OUTPUT);
+	omap_mux_init_signal("sdrc_cke1", OMAP_PIN_OUTPUT);
+
+	rockhopper_opp_init();
+}
+
+MACHINE_START(ROCKHOPPER, "Rockhopper")
+	.boot_params	= 0x80000100,
+	.reserve	= omap_reserve,
+	.map_io		= omap3_map_io,
+	.init_early	= rockhopper_init_early,
+	.init_irq	= rockhopper_init_irq,
+	.init_machine	= rockhopper_init,
+	.timer		= &omap3_secure_timer,
+MACHINE_END
diff --git a/sound/soc/omap/omap3beagle.c b/sound/soc/omap/omap3beagle.c
index 40db813..c18e4ee 100644
--- a/sound/soc/omap/omap3beagle.c
+++ b/sound/soc/omap/omap3beagle.c
@@ -111,9 +111,10 @@ static int __init omap3beagle_soc_init(void)
 {
 	int ret;
 
-	if (!(machine_is_omap3_beagle() || machine_is_devkit8000()))
+	if (!(machine_is_omap3_beagle() || machine_is_devkit8000() ||
+	      machine_is_rockhopper()))
 		return -ENODEV;
-	pr_info("OMAP3 Beagle/Devkit8000 SoC init\n");
+	pr_info("OMAP3 Beagle/Devkit8000/Rockhopper SoC init\n");
 
 	omap3beagle_snd_device = platform_device_alloc("soc-audio", -1);
 	if (!omap3beagle_snd_device) {
-- 
1.7.5.4

