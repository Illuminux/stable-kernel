From 38b7b04d79347915cbf3af673c5abb93f8fcf977 Mon Sep 17 00:00:00 2001
From: Ivan Gomez Castellanos <ivan.gomez@ti.com>
Date: Fri, 19 Mar 2010 18:19:55 -0600
Subject: [PATCH 086/135] DSPBRIDGE: Replace mem_alloc() by kmalloc()

This is needed because the file drivers/dsp/bridge/services/mem.c
is going to be deleted. The changes should be as follows:

mem_alloc(x, MEM_PAGED) ==> kmalloc(x, GFP_KERNEL)
mem_alloc(x, MEM_NONPAGED) ==> kmalloc(x, GFP_KERNEL)
mem_alloc(x, MEM_MEM_LARGEVIRTMEM) ==> vmalloc(x)

If running in atomic context, then the GFP_KERNEL argument
is changed to GFP_ATOMIC.

Signed-off-by: Ivan Gomez Castellanos <ivan.gomez@ti.com>
---
 drivers/dsp/bridge/pmgr/wcd.c    |   26 +++++++++++++-------------
 drivers/dsp/bridge/rmgr/drv.c    |    4 ++--
 drivers/dsp/bridge/rmgr/strm.c   |    4 ++--
 drivers/dsp/bridge/wmd/chnl_sm.c |    2 +-
 drivers/dsp/bridge/wmd/io_sm.c   |    6 +++---
 5 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/drivers/dsp/bridge/pmgr/wcd.c b/drivers/dsp/bridge/pmgr/wcd.c
index e809b4b..0c54acf 100644
--- a/drivers/dsp/bridge/pmgr/wcd.c
+++ b/drivers/dsp/bridge/pmgr/wcd.c
@@ -421,7 +421,7 @@ u32 mgrwrap_enum_node_info(union Trapped_Args *args, void *pr_ctxt)
 	if (size < sizeof(struct dsp_ndbprops))
 		return -EINVAL;
 
-	pndb_props = mem_alloc(size, MEM_NONPAGED);
+	pndb_props = kmalloc(size, GFP_KERNEL);
 	if (pndb_props == NULL)
 		status = -ENOMEM;
 
@@ -453,7 +453,7 @@ u32 mgrwrap_enum_proc_info(union Trapped_Args *args, void *pr_ctxt)
 	if (size < sizeof(struct dsp_processorinfo))
 		return -EINVAL;
 
-	processor_info = mem_alloc(size, MEM_NONPAGED);
+	processor_info = kmalloc(size, GFP_KERNEL);
 	if (processor_info == NULL)
 		status = -ENOMEM;
 
@@ -492,7 +492,7 @@ u32 mgrwrap_register_object(union Trapped_Args *args, void *pr_ctxt)
 	path_size = strlen_user((char *)
 				args->args_mgr_registerobject.psz_path_name) +
 	    1;
-	psz_path_name = mem_alloc(path_size, MEM_NONPAGED);
+	psz_path_name = kmalloc(path_size, GFP_KERNEL);
 	if (!psz_path_name)
 		goto func_end;
 	ret = strncpy_from_user(psz_path_name,
@@ -621,7 +621,7 @@ u32 procwrap_ctrl(union Trapped_Args *args, void *pr_ctxt)
 			goto func_end;
 		}
 		cb_data_size += sizeof(u32);
-		pargs = mem_alloc(cb_data_size, MEM_NONPAGED);
+		pargs = kmalloc(cb_data_size, GFP_KERNEL);
 		if (pargs == NULL) {
 			status = -ENOMEM;
 			goto func_end;
@@ -799,7 +799,7 @@ u32 procwrap_load(union Trapped_Args *args, void *pr_ctxt)
 		goto func_cont;
 	}
 
-	argv = mem_alloc(count * sizeof(u8 *), MEM_NONPAGED);
+	argv = kmalloc(count * sizeof(u8 *), GFP_KERNEL);
 	if (!argv) {
 		status = -ENOMEM;
 		goto func_cont;
@@ -819,7 +819,7 @@ u32 procwrap_load(union Trapped_Args *args, void *pr_ctxt)
 			/* len is increased by 1 to accommodate NULL */
 			len = strlen_user((char *)temp) + 1;
 			/* Kernel space pointer to argument */
-			argv[i] = mem_alloc(len, MEM_NONPAGED);
+			argv[i] = kmalloc(len, GFP_KERNEL);
 			if (argv[i]) {
 				CP_FM_USR(argv[i], temp, status, len);
 				if (DSP_FAILED(status)) {
@@ -841,7 +841,7 @@ u32 procwrap_load(union Trapped_Args *args, void *pr_ctxt)
 			get_user(temp, args->args_proc_load.user_envp + count);
 			count++;
 		} while (temp);
-		envp = mem_alloc(count * sizeof(u8 *), MEM_NONPAGED);
+		envp = kmalloc(count * sizeof(u8 *), GFP_KERNEL);
 		if (!envp) {
 			status = -ENOMEM;
 			goto func_cont;
@@ -859,7 +859,7 @@ u32 procwrap_load(union Trapped_Args *args, void *pr_ctxt)
 			/* len is increased by 1 to accommodate NULL */
 			len = strlen_user((char *)temp) + 1;
 			/* Kernel space pointer to argument */
-			envp[i] = mem_alloc(len, MEM_NONPAGED);
+			envp[i] = kmalloc(len, GFP_KERNEL);
 			if (envp[i]) {
 				CP_FM_USR(envp[i], temp, status, len);
 				if (DSP_FAILED(status)) {
@@ -1041,7 +1041,7 @@ u32 nodewrap_allocate(union Trapped_Args *args, void *pr_ctxt)
 
 		cb_data_size += sizeof(u32);
 		if (DSP_SUCCEEDED(status)) {
-			pargs = mem_alloc(cb_data_size, MEM_NONPAGED);
+			pargs = kmalloc(cb_data_size, GFP_KERNEL);
 			if (pargs == NULL)
 				status = -ENOMEM;
 
@@ -1142,7 +1142,7 @@ u32 nodewrap_connect(union Trapped_Args *args, void *pr_ctxt)
 
 		cb_data_size += sizeof(u32);
 		if (DSP_SUCCEEDED(status)) {
-			pargs = mem_alloc(cb_data_size, MEM_NONPAGED);
+			pargs = kmalloc(cb_data_size, GFP_KERNEL);
 			if (pargs == NULL) {
 				status = -ENOMEM;
 				goto func_cont;
@@ -1352,7 +1352,7 @@ u32 nodewrap_get_uuid_props(union Trapped_Args *args, void *pr_ctxt)
 		  1);
 	if (DSP_FAILED(status))
 		goto func_cont;
-	pnode_props = mem_alloc(sizeof(struct dsp_ndbprops), MEM_NONPAGED);
+	pnode_props = kmalloc(sizeof(struct dsp_ndbprops), GFP_KERNEL);
 	if (pnode_props != NULL) {
 		status =
 		    node_get_uuid_props(args->args_node_getuuidprops.hprocessor,
@@ -1378,7 +1378,7 @@ u32 strmwrap_allocate_buffer(union Trapped_Args *args, void *pr_ctxt)
 	if (num_bufs > MAX_BUFS)
 		return -EINVAL;
 
-	ap_buffer = mem_alloc((num_bufs * sizeof(u8 *)), MEM_NONPAGED);
+	ap_buffer = kmalloc((num_bufs * sizeof(u8 *)), GFP_KERNEL);
 
 	status = strm_allocate_buffer(args->args_strm_allocatebuffer.hstream,
 				      args->args_strm_allocatebuffer.usize,
@@ -1417,7 +1417,7 @@ u32 strmwrap_free_buffer(union Trapped_Args *args, void *pr_ctxt)
 	if (num_bufs > MAX_BUFS)
 		return -EINVAL;
 
-	ap_buffer = mem_alloc((num_bufs * sizeof(u8 *)), MEM_NONPAGED);
+	ap_buffer = kmalloc((num_bufs * sizeof(u8 *)), GFP_KERNEL);
 
 	CP_FM_USR(ap_buffer, args->args_strm_freebuffer.ap_buffer, status,
 		  num_bufs);
diff --git a/drivers/dsp/bridge/rmgr/drv.c b/drivers/dsp/bridge/rmgr/drv.c
index 16fa3c5..0b6a95a 100644
--- a/drivers/dsp/bridge/rmgr/drv.c
+++ b/drivers/dsp/bridge/rmgr/drv.c
@@ -356,8 +356,8 @@ dsp_status drv_remove_all_strm_res_elements(bhandle hPCtxt)
 		strm_res = strm_tmp;
 		strm_tmp = strm_tmp->next;
 		if (strm_res->num_bufs) {
-			ap_buffer = mem_alloc((strm_res->num_bufs *
-					       sizeof(u8 *)), MEM_NONPAGED);
+			ap_buffer = kmalloc((strm_res->num_bufs *
+					sizeof(u8 *)), GFP_KERNEL);
 			if (ap_buffer) {
 				status = strm_free_buffer(strm_res->hstream,
 							  ap_buffer,
diff --git a/drivers/dsp/bridge/rmgr/strm.c b/drivers/dsp/bridge/rmgr/strm.c
index aabc1d5..8f98cda 100644
--- a/drivers/dsp/bridge/rmgr/strm.c
+++ b/drivers/dsp/bridge/rmgr/strm.c
@@ -788,8 +788,8 @@ dsp_status strm_select(IN struct strm_object **strm_tab, u32 nStrms,
 	}
 	if (DSP_SUCCEEDED(status) && utimeout > 0 && *pmask == 0) {
 		/* Non-zero timeout */
-		sync_events = (struct sync_object **)mem_alloc(nStrms *
-			      sizeof(struct sync_object *), MEM_PAGED);
+		sync_events = kmalloc(nStrms * sizeof(struct sync_object *),
+								GFP_KERNEL);
 
 		if (sync_events == NULL) {
 			status = -ENOMEM;
diff --git a/drivers/dsp/bridge/wmd/chnl_sm.c b/drivers/dsp/bridge/wmd/chnl_sm.c
index f8675ea..36228b1 100644
--- a/drivers/dsp/bridge/wmd/chnl_sm.c
+++ b/drivers/dsp/bridge/wmd/chnl_sm.c
@@ -147,7 +147,7 @@ dsp_status bridge_chnl_add_io_req(struct chnl_object *chnl_obj, void *pHostBuf,
 			goto func_cont;
 		}
 		/* if addr in user mode, then copy to kernel space */
-		host_sys_buf = mem_alloc(buf_size, MEM_NONPAGED);
+		host_sys_buf = kmalloc(buf_size, GFP_KERNEL);
 		if (host_sys_buf == NULL) {
 			status = -ENOMEM;
 			goto func_end;
diff --git a/drivers/dsp/bridge/wmd/io_sm.c b/drivers/dsp/bridge/wmd/io_sm.c
index 9209833..593f2be 100644
--- a/drivers/dsp/bridge/wmd/io_sm.c
+++ b/drivers/dsp/bridge/wmd/io_sm.c
@@ -795,9 +795,9 @@ dsp_status bridge_io_on_loaded(struct io_mgr *hio_mgr)
 	    (hio_mgr->ul_trace_buffer_current - ul_dsp_va);
 	/* Calculate the size of trace buffer */
 	kfree(hio_mgr->pmsg);
-	hio_mgr->pmsg = mem_alloc(((hio_mgr->ul_trace_buffer_end -
-				    hio_mgr->ul_trace_buffer_begin) *
-				   hio_mgr->word_size) + 2, MEM_NONPAGED);
+	hio_mgr->pmsg = kmalloc(((hio_mgr->ul_trace_buffer_end -
+				hio_mgr->ul_trace_buffer_begin) *
+				hio_mgr->word_size) + 2, GFP_KERNEL);
 	if (!hio_mgr->pmsg)
 		status = -ENOMEM;
 
-- 
1.7.0.4

