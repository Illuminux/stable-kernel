From 1dfe6e40c5df8d778a47206310163cf551687e55 Mon Sep 17 00:00:00 2001
From: Ivan Gomez Castellanos <ivan.gomez@ti.com>
Date: Thu, 25 Mar 2010 18:39:55 -0600
Subject: [PATCH 088/135] DSPBRIDGE: Moving macros from mem.h to drv.h

Since mem.h file is going to be deleted, the following
macros are moved to drv.h:

MEM_LINEAR_ADDRESS
MEM_UNMAP_LINEAR_ADDRESS

Signed-off-by: Ivan Gomez Castellanos <ivan.gomez@ti.com>
---
 arch/arm/plat-omap/include/dspbridge/drv.h |   33 ++++++++++++++++++++++++++++
 arch/arm/plat-omap/include/dspbridge/mem.h |   33 ----------------------------
 2 files changed, 33 insertions(+), 33 deletions(-)

diff --git a/arch/arm/plat-omap/include/dspbridge/drv.h b/arch/arm/plat-omap/include/dspbridge/drv.h
index f5ea482..509395b 100644
--- a/arch/arm/plat-omap/include/dspbridge/drv.h
+++ b/arch/arm/plat-omap/include/dspbridge/drv.h
@@ -484,4 +484,37 @@ extern void mem_flush_cache(void *pMemBuf, u32 byte_size, s32 FlushType);
 extern void mem_free_phys_mem(void *pVirtualAddress,
 			      u32 pPhysicalAddress, u32 byte_size);
 
+/*
+ *  ======== MEM_LINEAR_ADDRESS ========
+ *  Purpose:
+ *      Get the linear address corresponding to the given physical address.
+ *  Parameters:
+ *      pPhysAddr:  Physical address to be mapped.
+ *      byte_size:     Number of bytes in physical range to map.
+ *  Returns:
+ *      The corresponding linear address, or NULL if unsuccessful.
+ *  Requires:
+ *      MEM initialized.
+ *  Ensures:
+ *  Notes:
+ *      If valid linear address is returned, be sure to call
+ *      MEM_UNMAP_LINEAR_ADDRESS().
+ */
+#define MEM_LINEAR_ADDRESS(pPhyAddr, byte_size) pPhyAddr
+
+/*
+ *  ======== MEM_UNMAP_LINEAR_ADDRESS ========
+ *  Purpose:
+ *      Unmap the linear address mapped in MEM_LINEAR_ADDRESS.
+ *  Parameters:
+ *      pBaseAddr: Ptr to mapped memory (as returned by MEM_LINEAR_ADDRESS()).
+ *  Returns:
+ *  Requires:
+ *      - MEM initialized.
+ *      - pBaseAddr is a valid linear address mapped in MEM_LINEAR_ADDRESS.
+ *  Ensures:
+ *      - pBaseAddr no longer points to a valid linear address.
+ */
+#define MEM_UNMAP_LINEAR_ADDRESS(pBaseAddr) {}
+
 #endif /* DRV_ */
diff --git a/arch/arm/plat-omap/include/dspbridge/mem.h b/arch/arm/plat-omap/include/dspbridge/mem.h
index 2e72de3..d352b4e 100644
--- a/arch/arm/plat-omap/include/dspbridge/mem.h
+++ b/arch/arm/plat-omap/include/dspbridge/mem.h
@@ -166,37 +166,4 @@ extern bool services_mem_init(void);
 #define MEM_IS_VALID_HANDLE(hObj, Sig)                \
      ((hObj != NULL) && (hObj->dw_signature == Sig))
 
-/*
- *  ======== MEM_LINEAR_ADDRESS ========
- *  Purpose:
- *      Get the linear address corresponding to the given physical address.
- *  Parameters:
- *      pPhysAddr:  Physical address to be mapped.
- *      byte_size:     Number of bytes in physical range to map.
- *  Returns:
- *      The corresponding linear address, or NULL if unsuccessful.
- *  Requires:
- *      MEM initialized.
- *  Ensures:
- *  Notes:
- *      If valid linear address is returned, be sure to call
- *      MEM_UNMAP_LINEAR_ADDRESS().
- */
-#define MEM_LINEAR_ADDRESS(pPhyAddr, byte_size) pPhyAddr
-
-/*
- *  ======== MEM_UNMAP_LINEAR_ADDRESS ========
- *  Purpose:
- *      Unmap the linear address mapped in MEM_LINEAR_ADDRESS.
- *  Parameters:
- *      pBaseAddr: Ptr to mapped memory (as returned by MEM_LINEAR_ADDRESS()).
- *  Returns:
- *  Requires:
- *      - MEM initialized.
- *      - pBaseAddr is a valid linear address mapped in MEM_LINEAR_ADDRESS.
- *  Ensures:
- *      - pBaseAddr no longer points to a valid linear address.
- */
-#define MEM_UNMAP_LINEAR_ADDRESS(pBaseAddr) {}
-
 #endif /* MEM_ */
-- 
1.7.0.4

