From d37e16d17d8b1879676d503d3daacc4dd66980ab Mon Sep 17 00:00:00 2001
From: Ivan Gomez Castellanos <ivan.gomez@ti.com>
Date: Mon, 29 Mar 2010 18:16:42 -0600
Subject: [PATCH 095/135] DSPBRIDGE: Remove IS_VALID_HANDLE function and macro

The patch "DSPBRIDGE: Replace MEM_ALLOC_OBJECT macro by kzalloc function"
do not set the dw_signature, then all the signature checking will be
removed.

IS_VALID_HANDLE can be replaced by a simple pointer check.

Signed-off-by: Ivan Gomez Castellanos <ivan.gomez@ti.com>
---
 arch/arm/plat-omap/include/dspbridge/wmd.h |    2 +-
 drivers/dsp/bridge/pmgr/dev.c              |   72 ++++++++++------------------
 drivers/dsp/bridge/rmgr/dbdcd.c            |   20 ++++----
 3 files changed, 35 insertions(+), 59 deletions(-)

diff --git a/arch/arm/plat-omap/include/dspbridge/wmd.h b/arch/arm/plat-omap/include/dspbridge/wmd.h
index afb30e7..9db5b6a 100644
--- a/arch/arm/plat-omap/include/dspbridge/wmd.h
+++ b/arch/arm/plat-omap/include/dspbridge/wmd.h
@@ -318,7 +318,7 @@ typedef dsp_status(*fxn_brd_write) (struct wmd_dev_context *hDevContext,
  *          0 < max_channels <= CHNL_MAXCHANNELS.
  *          birq <= 15.
  *          word_size > 0.
- *      IS_VALID_HANDLE(hdev_obj)
+ *      hdev_obj != NULL
  *      No channel manager exists for this board.
  *  Ensures:
  */
diff --git a/drivers/dsp/bridge/pmgr/dev.c b/drivers/dsp/bridge/pmgr/dev.c
index 2bb74f1..b0e340f 100644
--- a/drivers/dsp/bridge/pmgr/dev.c
+++ b/drivers/dsp/bridge/pmgr/dev.c
@@ -90,7 +90,6 @@ static u32 refs;		/* Module reference count */
 /*  ----------------------------------- Function Prototypes */
 static dsp_status fxn_not_implemented(int arg, ...);
 static dsp_status init_cod_mgr(struct dev_object *dev_obj);
-static bool IS_VALID_HANDLE(struct dev_object *hObj);
 static void store_interface_fxns(struct bridge_drv_interface *drv_fxns,
 				 OUT struct bridge_drv_interface *intf_fxns);
 /*
@@ -109,7 +108,7 @@ u32 dev_brd_write_fxn(void *pArb, u32 ulDspAddr, void *pHostBuf,
 
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(pHostBuf != NULL);	/* Required of BrdWrite(). */
-	if (IS_VALID_HANDLE(dev_obj)) {
+	if (dev_obj) {
 		/* Require of BrdWrite() */
 		DBC_ASSERT(dev_obj->hwmd_context != NULL);
 		status =
@@ -275,7 +274,7 @@ dsp_status dev_create_device(OUT struct dev_object **phDevObject,
 		*phDevObject = NULL;
 	}
 
-	DBC_ENSURE((DSP_SUCCEEDED(status) && IS_VALID_HANDLE(*phDevObject)) ||
+	DBC_ENSURE((DSP_SUCCEEDED(status) && *phDevObject) ||
 		   (DSP_FAILED(status) && !*phDevObject));
 	return status;
 }
@@ -293,7 +292,7 @@ dsp_status dev_create2(struct dev_object *hdev_obj)
 	struct dev_object *dev_obj = hdev_obj;
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(IS_VALID_HANDLE(hdev_obj));
+	DBC_REQUIRE(hdev_obj);
 
 	/* There can be only one Node Manager per DEV object */
 	DBC_ASSERT(!dev_obj->hnode_mgr);
@@ -317,7 +316,7 @@ dsp_status dev_destroy2(struct dev_object *hdev_obj)
 	struct dev_object *dev_obj = hdev_obj;
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(IS_VALID_HANDLE(hdev_obj));
+	DBC_REQUIRE(hdev_obj);
 
 	if (dev_obj->hnode_mgr) {
 		if (DSP_FAILED(node_delete_mgr(dev_obj->hnode_mgr)))
@@ -345,7 +344,7 @@ dsp_status dev_destroy_device(struct dev_object *hdev_obj)
 
 	DBC_REQUIRE(refs > 0);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		if (dev_obj->cod_mgr) {
 			cod_delete(dev_obj->cod_mgr);
 			dev_obj->cod_mgr = NULL;
@@ -428,7 +427,7 @@ dsp_status dev_get_chnl_mgr(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phMgr != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phMgr = dev_obj->hchnl_mgr;
 	} else {
 		*phMgr = NULL;
@@ -455,7 +454,7 @@ dsp_status dev_get_cmm_mgr(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phMgr != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phMgr = dev_obj->hcmm_mgr;
 	} else {
 		*phMgr = NULL;
@@ -482,7 +481,7 @@ dsp_status dev_get_dmm_mgr(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phMgr != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phMgr = dev_obj->dmm_mgr;
 	} else {
 		*phMgr = NULL;
@@ -508,7 +507,7 @@ dsp_status dev_get_cod_mgr(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phCodMgr != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phCodMgr = dev_obj->cod_mgr;
 	} else {
 		*phCodMgr = NULL;
@@ -531,7 +530,7 @@ dsp_status dev_get_deh_mgr(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phDehMgr != NULL);
 	DBC_REQUIRE(hdev_obj);
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phDehMgr = hdev_obj->hdeh_mgr;
 	} else {
 		*phDehMgr = NULL;
@@ -554,7 +553,7 @@ dsp_status dev_get_dev_node(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phDevNode != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phDevNode = dev_obj->dev_node_obj;
 	} else {
 		*phDevNode = NULL;
@@ -578,7 +577,7 @@ struct dev_object *dev_get_first(void)
 
 	dev_obj = (struct dev_object *)drv_get_first_dev_object();
 
-	DBC_ENSURE((dev_obj == NULL) || IS_VALID_HANDLE(dev_obj));
+	DBC_ENSURE((dev_obj == NULL) || dev_obj);
 
 	return dev_obj;
 }
@@ -598,7 +597,7 @@ dsp_status dev_get_intf_fxns(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(ppIntfFxns != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*ppIntfFxns = &dev_obj->wmd_interface;
 	} else {
 		*ppIntfFxns = NULL;
@@ -622,7 +621,7 @@ dsp_status dev_get_io_mgr(struct dev_object *hdev_obj,
 	DBC_REQUIRE(phIOMgr != NULL);
 	DBC_REQUIRE(hdev_obj);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phIOMgr = hdev_obj->hio_mgr;
 	} else {
 		*phIOMgr = NULL;
@@ -643,12 +642,12 @@ struct dev_object *dev_get_next(struct dev_object *hdev_obj)
 {
 	struct dev_object *next_dev_object = NULL;
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		next_dev_object = (struct dev_object *)
 		    drv_get_next_dev_object((u32) hdev_obj);
 	}
-	DBC_ENSURE((next_dev_object == NULL)
-		   || IS_VALID_HANDLE(next_dev_object));
+	DBC_ENSURE((next_dev_object == NULL) || next_dev_object);
+
 	return next_dev_object;
 }
 
@@ -678,7 +677,7 @@ dsp_status dev_get_node_manager(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phNodeMgr != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phNodeMgr = dev_obj->hnode_mgr;
 	} else {
 		*phNodeMgr = NULL;
@@ -702,7 +701,7 @@ dsp_status dev_get_symbol(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(pstrSym != NULL && pul_value != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		status = dev_get_cod_mgr(hdev_obj, &cod_mgr);
 		if (DSP_SUCCEEDED(status)) {
 			DBC_ASSERT(cod_mgr != NULL);
@@ -730,7 +729,7 @@ dsp_status dev_get_wmd_context(struct dev_object *hdev_obj,
 	DBC_REQUIRE(refs > 0);
 	DBC_REQUIRE(phWmdContext != NULL);
 
-	if (IS_VALID_HANDLE(hdev_obj)) {
+	if (hdev_obj) {
 		*phWmdContext = dev_obj->hwmd_context;
 	} else {
 		*phWmdContext = NULL;
@@ -853,7 +852,7 @@ dsp_status dev_set_chnl_mgr(struct dev_object *hdev_obj,
 
 	DBC_REQUIRE(refs > 0);
 
-	if (IS_VALID_HANDLE(hdev_obj))
+	if (hdev_obj)
 		dev_obj->hchnl_mgr = hmgr;
 	else
 		status = -EFAULT;
@@ -870,7 +869,7 @@ dsp_status dev_set_chnl_mgr(struct dev_object *hdev_obj,
 void dev_set_msg_mgr(struct dev_object *hdev_obj, struct msg_mgr *hmgr)
 {
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(IS_VALID_HANDLE(hdev_obj));
+	DBC_REQUIRE(hdev_obj);
 
 	hdev_obj->hmsg_mgr = hmgr;
 }
@@ -932,27 +931,6 @@ static dsp_status fxn_not_implemented(int arg, ...)
 }
 
 /*
- *  ======== IS_VALID_HANDLE ========
- *  Purpose:
- *      Validate the device object handle.
- *  Parameters:
- *      hdev_obj:     Handle to device object created with
- *                      dev_create_device().
- *  Returns:
- *      true if handle is valid; false otherwise.
- *  Requires:
- *  Ensures:
- */
-static bool IS_VALID_HANDLE(struct dev_object *hObj)
-{
-	bool ret;
-
-	ret = (hObj != NULL) && (hObj->dw_signature == SIGNATURE);
-
-	return ret;
-}
-
-/*
  *  ======== init_cod_mgr ========
  *  Purpose:
  *      Create a COD manager for this device.
@@ -972,7 +950,7 @@ static dsp_status init_cod_mgr(struct dev_object *dev_obj)
 	char *sz_dummy_file = "dummy";
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(!IS_VALID_HANDLE(dev_obj) || (dev_obj->cod_mgr == NULL));
+	DBC_REQUIRE(!dev_obj || (dev_obj->cod_mgr == NULL));
 
 	status = cod_create(&dev_obj->cod_mgr, sz_dummy_file, NULL);
 
@@ -1005,7 +983,7 @@ dsp_status dev_insert_proc_object(struct dev_object *hdev_obj,
 	struct dev_object *dev_obj = (struct dev_object *)hdev_obj;
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(IS_VALID_HANDLE(dev_obj));
+	DBC_REQUIRE(dev_obj);
 	DBC_REQUIRE(proc_obj != 0);
 	DBC_REQUIRE(dev_obj->proc_list != NULL);
 	DBC_REQUIRE(pbAlreadyAttached != NULL);
@@ -1044,7 +1022,7 @@ dsp_status dev_remove_proc_object(struct dev_object *hdev_obj, u32 proc_obj)
 	struct list_head *cur_elem;
 	struct dev_object *dev_obj = (struct dev_object *)hdev_obj;
 
-	DBC_REQUIRE(IS_VALID_HANDLE(dev_obj));
+	DBC_REQUIRE(dev_obj);
 	DBC_REQUIRE(proc_obj != 0);
 	DBC_REQUIRE(dev_obj->proc_list != NULL);
 	DBC_REQUIRE(!LST_IS_EMPTY(dev_obj->proc_list));
diff --git a/drivers/dsp/bridge/rmgr/dbdcd.c b/drivers/dsp/bridge/rmgr/dbdcd.c
index af53286..39be50a 100644
--- a/drivers/dsp/bridge/rmgr/dbdcd.c
+++ b/drivers/dsp/bridge/rmgr/dbdcd.c
@@ -45,8 +45,6 @@
 /*  ----------------------------------- Global defines. */
 #define SIGNATURE       0x5f444344	/* "DCD_" (in reverse). */
 
-#define IS_VALID_HANDLE(h) (((h) != NULL) && (h->dw_signature == SIGNATURE))
-
 #define MAX_INT2CHAR_LENGTH     16	/* Max int2char len of 32 bit int */
 
 /* Name of section containing dependent libraries */
@@ -93,7 +91,7 @@ dsp_status dcd_auto_register(IN struct dcd_manager *hdcd_mgr,
 
 	DBC_REQUIRE(refs > 0);
 
-	if (IS_VALID_HANDLE(hdcd_mgr))
+	if (hdcd_mgr)
 		status = dcd_get_objects(hdcd_mgr, pszCoffPath,
 					 (dcd_registerfxn) dcd_register_object,
 					 (void *)pszCoffPath);
@@ -115,7 +113,7 @@ dsp_status dcd_auto_unregister(IN struct dcd_manager *hdcd_mgr,
 
 	DBC_REQUIRE(refs > 0);
 
-	if (IS_VALID_HANDLE(hdcd_mgr))
+	if (hdcd_mgr)
 		status = dcd_get_objects(hdcd_mgr, pszCoffPath,
 					 (dcd_registerfxn) dcd_register_object,
 					 NULL);
@@ -182,7 +180,7 @@ dsp_status dcd_destroy_manager(IN struct dcd_manager *hdcd_mgr)
 
 	DBC_REQUIRE(refs >= 0);
 
-	if (IS_VALID_HANDLE(hdcd_mgr)) {
+	if (hdcd_mgr) {
 		/* Delete the COD manager. */
 		cod_delete(dcd_mgr_obj->cod_mgr);
 
@@ -337,7 +335,7 @@ dsp_status dcd_get_dep_libs(IN struct dcd_manager *hdcd_mgr,
 	dsp_status status = DSP_SOK;
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(IS_VALID_HANDLE(hdcd_mgr));
+	DBC_REQUIRE(hdcd_mgr);
 	DBC_REQUIRE(uuid_obj != NULL);
 	DBC_REQUIRE(pDepLibUuids != NULL);
 	DBC_REQUIRE(pPersistentDepLibs != NULL);
@@ -360,7 +358,7 @@ dsp_status dcd_get_num_dep_libs(IN struct dcd_manager *hdcd_mgr,
 	dsp_status status = DSP_SOK;
 
 	DBC_REQUIRE(refs > 0);
-	DBC_REQUIRE(IS_VALID_HANDLE(hdcd_mgr));
+	DBC_REQUIRE(hdcd_mgr);
 	DBC_REQUIRE(pNumLibs != NULL);
 	DBC_REQUIRE(pNumPersLibs != NULL);
 	DBC_REQUIRE(uuid_obj != NULL);
@@ -406,7 +404,7 @@ dsp_status dcd_get_object_def(IN struct dcd_manager *hdcd_mgr,
 		goto func_end;
 	}
 
-	if (!IS_VALID_HANDLE(hdcd_mgr)) {
+	if (!hdcd_mgr) {
 		status = -EFAULT;
 		goto func_end;
 	}
@@ -553,7 +551,7 @@ dsp_status dcd_get_objects(IN struct dcd_manager *hdcd_mgr,
 	s32 object_type;
 
 	DBC_REQUIRE(refs > 0);
-	if (!IS_VALID_HANDLE(hdcd_mgr)) {
+	if (!hdcd_mgr) {
 		status = -EFAULT;
 		goto func_end;
 	}
@@ -660,7 +658,7 @@ dsp_status dcd_get_library_name(IN struct dcd_manager *hdcd_mgr,
 	DBC_REQUIRE(uuid_obj != NULL);
 	DBC_REQUIRE(pstrLibName != NULL);
 	DBC_REQUIRE(pdwSize != NULL);
-	DBC_REQUIRE(IS_VALID_HANDLE(hdcd_mgr));
+	DBC_REQUIRE(hdcd_mgr);
 
 	dev_dbg(bridge, "%s: hdcd_mgr %p, uuid_obj %p, pstrLibName %p, pdwSize "
 		"%p\n", __func__, hdcd_mgr, uuid_obj, pstrLibName, pdwSize);
@@ -1416,7 +1414,7 @@ static dsp_status get_dep_lib_info(IN struct dcd_manager *hdcd_mgr,
 
 	DBC_REQUIRE(refs > 0);
 
-	DBC_REQUIRE(IS_VALID_HANDLE(hdcd_mgr));
+	DBC_REQUIRE(hdcd_mgr);
 	DBC_REQUIRE(pNumLibs != NULL);
 	DBC_REQUIRE(uuid_obj != NULL);
 
-- 
1.7.0.4

