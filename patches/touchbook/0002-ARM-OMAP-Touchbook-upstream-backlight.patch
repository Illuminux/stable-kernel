From 45c18de4f7fc4704de823537c8c37ebd233d43c5 Mon Sep 17 00:00:00 2001
From: Robert Nelson <robertcnelson@gmail.com>
Date: Fri, 17 Sep 2010 13:48:50 -0500
Subject: [PATCH 2/2] ARM OMAP Touchbook upstream backlight

---
 arch/arm/mach-omap2/board-omap3touchbook.c |   81 ++++++++++++++++++++++++++++
 1 files changed, 81 insertions(+), 0 deletions(-)

diff --git a/arch/arm/mach-omap2/board-omap3touchbook.c b/arch/arm/mach-omap2/board-omap3touchbook.c
index 01a006c..bbd4980 100644
--- a/arch/arm/mach-omap2/board-omap3touchbook.c
+++ b/arch/arm/mach-omap2/board-omap3touchbook.c
@@ -53,10 +53,14 @@
 #include <plat/usb.h>
 #include <plat/timer-gp.h>
 
+#include <plat/clock.h>
+#include <plat/omap-pm.h>
 #include "mux.h"
 #include "hsmmc.h"
 
 #include <asm/setup.h>
+#include <plat/dmtimer.h>
+#include <linux/backlight.h>
 #include "sdram-micron-mt46h32m32lf-6.h"
 
 #define OMAP3_AC_GPIO		136
@@ -619,6 +623,82 @@ static void __init touchbook_mma7455l_init(void)
 	gpio_direction_input(touchbook_mma7455l_gpio);
 }
 
+static int touchbook_backlight_brightness = 50;
+static struct omap_dm_timer *touchbook_backlight_pwm;
+
+static int touchbook_backlight_read(struct backlight_device *bd)
+{
+	return touchbook_backlight_brightness;
+}
+
+static int touchbook_backlight_update(struct backlight_device *bd)
+{
+	int value = bd->props.brightness;
+	touchbook_backlight_brightness = value;
+
+	/* Frequency calculation:
+	   - For 200Hz PWM, you want to load -164 (=> -32768Hz / 200Hz).
+	   - Minimum duty cycle for the backlight is 15%.
+	   - You have (164*0.85) => ~140 levels of brightness.
+	*/
+
+	/* Halve input brightness */
+	if (!bd->props.boost)
+		value /= 2;
+
+	/* For maximum brightness, just stop the timer... */
+	if(value != bd->props.max_brightness)
+	{
+		/* Load the appropriate value for 200Hz PWM */
+		u32 period = clk_get_rate(omap_dm_timer_get_fclk(touchbook_backlight_pwm)) / bd->props.pwm_fq;
+
+		/* Minimum duty cycle is 15% */
+		u32 minimum = (period * bd->props.min_duty) / 100;
+		u32 maximum = (period * 17) / 20;
+
+		/* Work out match value */
+		u32 match = (maximum * value) / 100;
+
+		/* Start... */
+		omap_dm_timer_set_load(touchbook_backlight_pwm, 1, 0xFFFFFFFF - period - 1);
+		omap_dm_timer_set_match(touchbook_backlight_pwm, 1, 0xFFFFFFFF - minimum - match);
+		omap_dm_timer_write_counter(touchbook_backlight_pwm, -1);
+		omap_dm_timer_start(touchbook_backlight_pwm);
+	}
+	else
+		omap_dm_timer_stop(touchbook_backlight_pwm);
+
+
+	return 0;
+}
+
+static struct backlight_ops touchbook_backlight_properties = {
+	.get_brightness = touchbook_backlight_read,
+	.update_status = touchbook_backlight_update,
+};
+
+static void __init touchbook_backlight_init(void)
+{
+	static struct backlight_device *bd;
+	int touchbook_bl_pwm_timer = 9;
+	bd = backlight_device_register("touchbook", NULL, NULL, &touchbook_backlight_properties);
+
+	if(bd)
+	{
+		touchbook_backlight_pwm = omap_dm_timer_request_specific(touchbook_bl_pwm_timer);
+		omap_dm_timer_enable(touchbook_backlight_pwm);
+		omap_dm_timer_set_source(touchbook_backlight_pwm, OMAP_TIMER_SRC_SYS_CLK);
+		omap_dm_timer_set_pwm(touchbook_backlight_pwm, 1, 1, OMAP_TIMER_TRIGGER_OVERFLOW_AND_COMPARE);
+
+		bd->props.max_brightness = 100;
+		bd->props.brightness = touchbook_backlight_brightness;
+		bd->props.boost = 0;
+		bd->props.min_duty = 15;
+		bd->props.pwm_fq = 200;
+	}
+
+	touchbook_backlight_update(bd);
+}
 static void touchbook_poweroff(void)
 {
 	int r;
@@ -656,6 +736,7 @@ static void __init touchbook_init(void)
 	omap_mux_init_signal("sdrc_cke1", OMAP_PIN_OUTPUT);
 
 	touchbook_display_init();
+	touchbook_backlight_init();
 
 	/* Touchscreen and accelerometer */
 	spi_register_board_info(touchbook_spi_board_info_4, ARRAY_SIZE(touchbook_spi_board_info_4));
-- 
1.7.1

