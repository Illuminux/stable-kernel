From 99f16ca33370493a3457484fa99b6e7fae4e5497 Mon Sep 17 00:00:00 2001
From: Enric Balletbo i Serra <eballetbo@iseebcn.com>
Date: Wed, 21 Sep 2011 12:21:47 +0200
Subject: [PATCH 08/44] OMAP3: igep0020: Use common twl4030 initialitzation functions and regulators

The twl4030 initialitzation function is common for all IGEP boards, so
remove current initialitzation and use the init function provided for
the board-igep00x0.c file.

Signed-off-by: Enric Balletbo i Serra <eballetbo@iseebcn.com>
---
 arch/arm/mach-omap2/board-igep0020.c |  179 ++++++++--------------------------
 1 files changed, 41 insertions(+), 138 deletions(-)

diff --git a/arch/arm/mach-omap2/board-igep0020.c b/arch/arm/mach-omap2/board-igep0020.c
index bc971ca..1cfc936 100644
--- a/arch/arm/mach-omap2/board-igep0020.c
+++ b/arch/arm/mach-omap2/board-igep0020.c
@@ -39,6 +39,7 @@
 #include "mux.h"
 #include "hsmmc.h"
 #include "sdram-numonyx-m65kxxxxam.h"
+#include "twl-common.h"
 #include "common-board-devices.h"
 
 #define SMSC911X_CS			5
@@ -105,73 +106,6 @@ static void __init igep0020_get_revision(void)
 	gpio_free(GPIO_LED_D240_RED);
 }
 
-static struct regulator_consumer_supply igep_vmmc1_supply[] = {
-	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.0"),
-};
-
-/* VMMC1 for OMAP VDD_MMC1 (i/o) and MMC1 card */
-static struct regulator_init_data igep_vmmc1 = {
-	.constraints = {
-		.min_uV			= 1850000,
-		.max_uV			= 3150000,
-		.valid_modes_mask	= REGULATOR_MODE_NORMAL
-					| REGULATOR_MODE_STANDBY,
-		.valid_ops_mask		= REGULATOR_CHANGE_VOLTAGE
-					| REGULATOR_CHANGE_MODE
-					| REGULATOR_CHANGE_STATUS,
-	},
-	.num_consumer_supplies  = ARRAY_SIZE(igep_vmmc1_supply),
-	.consumer_supplies      = igep_vmmc1_supply,
-};
-
-static struct regulator_consumer_supply igep_vio_supply[] = {
-	REGULATOR_SUPPLY("vmmc_aux", "omap_hsmmc.1"),
-};
-
-static struct regulator_init_data igep_vio = {
-	.constraints = {
-		.min_uV			= 1800000,
-		.max_uV			= 1800000,
-		.apply_uV		= 1,
-		.valid_modes_mask	= REGULATOR_MODE_NORMAL
-					| REGULATOR_MODE_STANDBY,
-		.valid_ops_mask		= REGULATOR_CHANGE_VOLTAGE
-					| REGULATOR_CHANGE_MODE
-					| REGULATOR_CHANGE_STATUS,
-	},
-	.num_consumer_supplies  = ARRAY_SIZE(igep_vio_supply),
-	.consumer_supplies      = igep_vio_supply,
-};
-
-static struct regulator_consumer_supply igep_vmmc2_supply[] = {
-	REGULATOR_SUPPLY("vmmc", "omap_hsmmc.1"),
-};
-
-static struct regulator_init_data igep_vmmc2 = {
-	.constraints		= {
-		.valid_modes_mask	= REGULATOR_MODE_NORMAL,
-		.always_on		= 1,
-	},
-	.num_consumer_supplies	= ARRAY_SIZE(igep_vmmc2_supply),
-	.consumer_supplies	= igep_vmmc2_supply,
-};
-
-static struct fixed_voltage_config igep_vwlan = {
-	.supply_name		= "vwlan",
-	.microvolts		= 3300000,
-	.gpio			= -EINVAL,
-	.enabled_at_boot	= 1,
-	.init_data		= &igep_vmmc2,
-};
-
-static struct platform_device igep_vwlan_device = {
-	.name		= "reg-fixed-voltage",
-	.id		= 0,
-	.dev = {
-		.platform_data	= &igep_vwlan,
-	},
-};
-
 static struct omap2_hsmmc_info mmc[] = {
 	{
 		.mmc		= 1,
@@ -232,45 +166,36 @@ static void __init igep0020_leds_init(void)
 	platform_device_register(&igep0020_led_device);
 }
 
-static struct gpio igep2_twl_gpios[] = {
-	{ -EINVAL, GPIOF_IN,		"GPIO_EHCI_NOC"  },
-	{ -EINVAL, GPIOF_OUT_INIT_LOW,	"GPIO_USBH_CPEN" },
-};
-
-static int igep_twl_gpio_setup(struct device *dev,
+static int igep0020_twl_gpio_setup(struct device *dev,
 		unsigned gpio, unsigned ngpio)
 {
-	int ret;
-
 	/* gpio + 0 is "mmc0_cd" (input/IRQ) */
 	mmc[0].gpio_cd = gpio + 0;
 	omap2_hsmmc_init(mmc);
 
-	/* TWL4030_GPIO_MAX + 1 == ledB (out, active low LED) */
-	igep0020_gpio_leds[3].gpio = gpio + TWL4030_GPIO_MAX + 1;
-
 	/*
 	 * REVISIT: need ehci-omap hooks for external VBUS
 	 * power switch and overcurrent detect
 	 */
-	igep2_twl_gpios[0].gpio = gpio + 1;
+	gpio_request(gpio + 1, "EHCI NOC");
+	gpio_direction_input(gpio + 1);
 
 	/* TWL4030_GPIO_MAX + 0 == ledA, GPIO_USBH_CPEN (out, active low) */
-	igep2_twl_gpios[1].gpio = gpio + TWL4030_GPIO_MAX;
+	gpio_request(gpio + TWL4030_GPIO_MAX, "USB_ PEN");
+	gpio_direction_output(gpio + TWL4030_GPIO_MAX, 0);
 
-	ret = gpio_request_array(igep2_twl_gpios, ARRAY_SIZE(igep2_twl_gpios));
-	if (ret < 0)
-		pr_err("IGEP2: Could not obtain gpio for USBH_CPEN");
+	/* TWL4030_GPIO_MAX + 1 == ledB (out, active low LED) */
+	igep0020_gpio_leds[3].gpio = gpio + TWL4030_GPIO_MAX + 1;
 
 	return 0;
 };
 
-static struct twl4030_gpio_platform_data igep_twl4030_gpio_pdata = {
+static struct twl4030_gpio_platform_data igep0020_twl4030_gpio_pdata = {
 	.gpio_base	= OMAP_MAX_GPIO_LINES,
 	.irq_base	= TWL4030_GPIO_IRQ_BASE,
 	.irq_end	= TWL4030_GPIO_IRQ_END,
 	.use_leds	= true,
-	.setup		= igep_twl_gpio_setup,
+	.setup		= igep0020_twl_gpio_setup,
 };
 
 static int igep2_enable_dvi(struct omap_dss_device *dssdev)
@@ -317,18 +242,7 @@ static void __init igep2_display_init(void)
 		pr_err("IGEP v2: Could not obtain gpio GPIO_DVI_PUP\n");
 }
 
-static struct platform_device *igep_devices[] __initdata = {
-	&igep_vwlan_device,
-};
-
-static void __init igep_init_early(void)
-{
-	omap2_init_common_infrastructure();
-	omap2_init_common_devices(m65kxxxxam_sdrc_params,
-				  m65kxxxxam_sdrc_params);
-}
-
-static int igep2_keymap[] = {
+static int igep0020_keymap[] = {
 	KEY(0, 0, KEY_LEFT),
 	KEY(0, 1, KEY_RIGHT),
 	KEY(0, 2, KEY_A),
@@ -347,58 +261,30 @@ static int igep2_keymap[] = {
 	KEY(3, 3, KEY_P)
 };
 
-static struct matrix_keymap_data igep2_keymap_data = {
-	.keymap			= igep2_keymap,
-	.keymap_size		= ARRAY_SIZE(igep2_keymap),
+static struct matrix_keymap_data igep0020_keymap_data = {
+	.keymap			= igep0020_keymap,
+	.keymap_size		= ARRAY_SIZE(igep0020_keymap),
 };
 
-static struct twl4030_keypad_data igep2_keypad_pdata = {
-	.keymap_data	= &igep2_keymap_data,
+static struct twl4030_keypad_data igep0020_twl4030_keypad_data = {
+	.keymap_data	= &igep0020_keymap_data,
 	.rows		= 4,
 	.cols		= 4,
 	.rep		= 1,
 };
 
-static struct twl4030_platform_data igep_twldata = {
+static struct twl4030_platform_data twl4030_pdata = {
 	/* platform_data for children goes here */
-	.gpio		= &igep_twl4030_gpio_pdata,
-	.vmmc1          = &igep_vmmc1,
-	.vio		= &igep_vio,
+	.gpio		= &igep0020_twl4030_gpio_pdata,
+	.keypad		= &igep0020_twl4030_keypad_data,
 };
 
-static struct i2c_board_info __initdata igep2_i2c3_boardinfo[] = {
+static struct i2c_board_info __initdata igep0020_i2c3_boardinfo[] = {
 	{
 		I2C_BOARD_INFO("eeprom", 0x50),
 	},
 };
 
-static void __init igep_i2c_init(void)
-{
-	int ret;
-
-	omap3_pmic_get_config(&igep_twldata, TWL_COMMON_PDATA_USB, 0);
-
-	if (machine_is_igep0020()) {
-		/*
-		 * Bus 3 is attached to the DVI port where devices like the
-		 * pico DLP projector don't work reliably with 400kHz
-		 */
-		ret = omap_register_i2c_bus(3, 100, igep2_i2c3_boardinfo,
-					    ARRAY_SIZE(igep2_i2c3_boardinfo));
-		if (ret)
-			pr_warning("IGEP2: Could not register I2C3 bus (%d)\n", ret);
-
-		igep_twldata.keypad	= &igep2_keypad_pdata;
-		/* Get common pmic data */
-		omap3_pmic_get_config(&igep_twldata, TWL_COMMON_PDATA_AUDIO,
-				      TWL_COMMON_REGULATOR_VPLL2);
-		igep_twldata.vpll2->constraints.apply_uV = true;
-		igep_twldata.vpll2->constraints.name = "VDVI";
-	}
-
-	omap3_pmic_init("twl4030", &igep_twldata);
-}
-
 static const struct usbhs_omap_board_data igep2_usbhs_bdata __initconst = {
 	.port_mode[0] = OMAP_EHCI_PORT_MODE_PHY,
 	.port_mode[1] = OMAP_USBHS_PORT_MODE_UNUSED,
@@ -425,9 +311,26 @@ static void __init igep_init(void)
 	/* Get IGEP0020 Hardware Revision */
 	igep0020_get_revision();
 
-	/* Register I2C busses and drivers */
-	igep_i2c_init();
-	platform_add_devices(igep_devices, ARRAY_SIZE(igep_devices));
+	/* Add twl4030 common data */
+	omap3_pmic_get_config(&twl4030_pdata, TWL_COMMON_PDATA_USB |
+			TWL_COMMON_PDATA_AUDIO | TWL_COMMON_PDATA_MADC,
+			TWL_COMMON_REGULATOR_VDAC | TWL_COMMON_REGULATOR_VPLL2);
+
+	igep00x0_pmic_get_config(&twl4030_pdata, 0,
+			TWL_IGEP00X0_REGULATOR_VMMC1 |
+			TWL_IGEP00X0_REGULATOR_VIO);
+
+	omap_pmic_init(1, 2600, "twl4030", INT_34XX_SYS_NIRQ, &twl4030_pdata);
+
+	/*
+	 * Bus 3 is attached to the DVI port where devices like the pico DLP
+	 * projector don't work reliably with 400kHz
+	 */
+	omap_register_i2c_bus(3, 100, igep0020_i2c3_boardinfo,
+			 ARRAY_SIZE(igep0020_i2c3_boardinfo));
+
+	platform_device_register(&igep00x0_vdd33_device);
+
 	omap_serial_init();
 	usb_musb_init(NULL);
 
@@ -464,7 +367,7 @@ MACHINE_START(IGEP0020, "IGEP v2 board")
 	.boot_params	= 0x80000100,
 	.reserve	= omap_reserve,
 	.map_io		= omap3_map_io,
-	.init_early	= igep_init_early,
+	.init_early	= igep00x0_init_early,
 	.init_irq	= omap3_init_irq,
 	.init_machine	= igep_init,
 	.timer		= &omap3_timer,
-- 
1.7.4.1

